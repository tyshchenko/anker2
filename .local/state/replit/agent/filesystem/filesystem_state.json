{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Exchange Application\n\n## Overview\n\nThis is a cryptocurrency exchange web application built with React, Express.js, and PostgreSQL. The application provides a trading platform with real-time market data, multi-currency support (including South African Rand), and a modern dark-themed UI. It features a sidebar navigation, price charts, market tickers, and trading functionality for buying, selling, and converting between cryptocurrencies and fiat currencies.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite for development and bundling\n- **UI Library**: Shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Charts**: Recharts library for financial data visualization\n- **Form Handling**: React Hook Form with Zod validation\n- **Responsive Design**: Mobile-first approach with responsive sidebar and adaptive layouts\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript running on Node.js\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect for type-safe database operations\n- **Real-time Communication**: WebSocket server integration for live price updates\n- **Data Storage**: In-memory storage with interface design allowing easy database migration\n- **API Design**: RESTful endpoints with structured error handling and request logging\n- **Build System**: ESBuild for server compilation with external package bundling\n\n### Database Schema\n- **Users Table**: User authentication with username/password storage\n- **Trades Table**: Complete trade history with asset pairs, amounts, rates, and fees\n- **Market Data Table**: Historical price data with 24h change and volume metrics\n- **Data Types**: Decimal precision for financial calculations to avoid floating-point errors\n\n### Authentication and Session Management\n- **Session Storage**: PostgreSQL session store with connect-pg-simple\n- **User Management**: Basic username/password authentication system\n- **Trade Authorization**: User-specific trade history and portfolio tracking\n\n### Real-time Features\n- **WebSocket Integration**: Live price updates and market data streaming\n- **Market Data Refresh**: 5-second interval polling for price updates\n- **UI State Synchronization**: Automatic re-fetching on window focus and connection restore\n\n### Trading Engine\n- **Multi-Asset Support**: Cryptocurrencies (BTC, ETH, USDT) and fiat currencies (ZAR, USD, EUR, GBP)\n- **Exchange Rate Calculation**: Real-time conversion rates with ZAR as base currency\n- **Fee Structure**: Configurable transaction fees (0.1% default)\n- **Trade Types**: Buy, sell, and convert operations with validation\n- **Price Discovery**: Mock price feeds with volatility simulation for development\n\n## External Dependencies\n\n### Core Technologies\n- **Neon Database**: Serverless PostgreSQL database provider (@neondatabase/serverless)\n- **Drizzle Kit**: Database migrations and schema management\n- **React Ecosystem**: Core React libraries and hooks\n\n### UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **Radix UI**: Accessible component primitives for complex UI elements\n- **Recharts**: React-based charting library for financial data visualization\n- **Lucide React**: Icon library for consistent iconography\n\n### Development Tools\n- **TypeScript**: Static type checking across frontend and backend\n- **Vite**: Fast build tool with hot module replacement\n- **ESBuild**: JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Tailwind CSS integration\n\n### Validation and Forms\n- **Zod**: Schema validation for API endpoints and form data\n- **React Hook Form**: Form state management with validation\n- **Drizzle Zod**: Database schema to Zod schema generation\n\n### Utility Libraries\n- **date-fns**: Date manipulation and formatting\n- **clsx/twMerge**: Conditional CSS class utilities\n- **nanoid**: Unique ID generation for entities\n- **ws**: WebSocket implementation for real-time communication","size_bytes":4222},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        \"price-up\": \"var(--price-up)\",\n        \"price-down\": \"var(--price-down)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        scroll: {\n          \"0%\": { transform: \"translateX(100%)\" },\n          \"100%\": { transform: \"translateX(-100%)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"ticker-scroll\": \"scroll 30s linear infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3037},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { insertTradeSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Market data endpoints\n  app.get(\"/api/market/:pair\", async (req, res) => {\n    try {\n      const { pair } = req.params;\n      const data = await storage.getMarketData(pair);\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch market data\" });\n    }\n  });\n\n  app.get(\"/api/market\", async (req, res) => {\n    try {\n      const data = await storage.getAllMarketData();\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch market data\" });\n    }\n  });\n\n  // Trading endpoints\n  app.post(\"/api/trades\", async (req, res) => {\n    try {\n      const tradeData = insertTradeSchema.parse(req.body);\n      const trade = await storage.createTrade(tradeData);\n      res.json(trade);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid trade data\" });\n    }\n  });\n\n  app.get(\"/api/trades/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const trades = await storage.getUserTrades(userId);\n      res.json(trades);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch trades\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time price updates\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  wss.on('connection', (ws: WebSocket) => {\n    console.log('WebSocket client connected');\n\n    // Send initial market data\n    storage.getAllMarketData().then(data => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.send(JSON.stringify({ type: 'market_data', data }));\n      }\n    });\n\n    ws.on('message', (message: string) => {\n      try {\n        const data = JSON.parse(message);\n        if (data.type === 'subscribe' && data.pair) {\n          // Handle subscription to specific trading pairs\n          console.log(`Client subscribed to ${data.pair}`);\n        }\n      } catch (error) {\n        console.error('Invalid WebSocket message:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      console.log('WebSocket client disconnected');\n    });\n  });\n\n  // Simulate real-time price updates\n  setInterval(async () => {\n    const allData = await storage.getAllMarketData();\n    const updates = allData.map(data => {\n      const currentPrice = parseFloat(data.price);\n      const volatility = (Math.random() - 0.5) * 0.001; // ±0.05% volatility\n      const newPrice = currentPrice * (1 + volatility);\n      \n      return {\n        ...data,\n        price: newPrice.toString(),\n        timestamp: new Date()\n      };\n    });\n\n    // Broadcast to all connected clients\n    wss.clients.forEach(client => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(JSON.stringify({ type: 'price_update', data: updates }));\n      }\n    });\n  }, 5000); // Update every 5 seconds\n\n  return httpServer;\n}\n","size_bytes":3134},"server/storage.ts":{"content":"import { type User, type InsertUser, type Trade, type InsertTrade, type MarketData, type InsertMarketData } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  createTrade(trade: InsertTrade): Promise<Trade>;\n  getUserTrades(userId: string): Promise<Trade[]>;\n  \n  getMarketData(pair: string): Promise<MarketData[]>;\n  updateMarketData(data: InsertMarketData): Promise<MarketData>;\n  getAllMarketData(): Promise<MarketData[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private trades: Map<string, Trade>;\n  private marketData: Map<string, MarketData[]>;\n\n  constructor() {\n    this.users = new Map();\n    this.trades = new Map();\n    this.marketData = new Map();\n    \n    // Initialize with some sample market data\n    this.initializeMarketData();\n  }\n\n  private initializeMarketData() {\n    const pairs = [\"BTC/ZAR\", \"ETH/ZAR\", \"USDT/ZAR\", \"USD/ZAR\", \"EUR/ZAR\", \"GBP/ZAR\"];\n    const basePrices: Record<string, number> = {\n      \"BTC/ZAR\": 1202500,\n      \"ETH/ZAR\": 64750,\n      \"USDT/ZAR\": 18.50,\n      \"USD/ZAR\": 18.50,\n      \"EUR/ZAR\": 20.00,\n      \"GBP/ZAR\": 23.00\n    };\n\n    pairs.forEach(pair => {\n      const basePrice = basePrices[pair] || 1;\n      const data: MarketData[] = [];\n      \n      // Generate 72 hours of hourly data\n      for (let i = 71; i >= 0; i--) {\n        const timestamp = new Date(Date.now() - i * 60 * 60 * 1000);\n        const volatility = Math.random() * 0.02 - 0.01; // ±1% volatility\n        const price = basePrice * (1 + volatility);\n        \n        data.push({\n          id: randomUUID(),\n          pair,\n          price: price.toString(),\n          change24h: ((Math.random() - 0.5) * 5).toString(), // ±2.5% change\n          volume24h: (Math.random() * 1000000).toString(),\n          timestamp\n        });\n      }\n      \n      this.marketData.set(pair, data);\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createTrade(insertTrade: InsertTrade): Promise<Trade> {\n    const id = randomUUID();\n    const trade: Trade = { \n      ...insertTrade, \n      id, \n      createdAt: new Date(),\n      status: \"completed\"\n    };\n    this.trades.set(id, trade);\n    return trade;\n  }\n\n  async getUserTrades(userId: string): Promise<Trade[]> {\n    return Array.from(this.trades.values())\n      .filter(trade => trade.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getMarketData(pair: string): Promise<MarketData[]> {\n    return this.marketData.get(pair) || [];\n  }\n\n  async updateMarketData(data: InsertMarketData): Promise<MarketData> {\n    const marketData: MarketData = {\n      ...data,\n      id: randomUUID(),\n      timestamp: new Date()\n    };\n\n    const existing = this.marketData.get(data.pair) || [];\n    existing.push(marketData);\n    \n    // Keep only last 72 hours of data\n    const cutoff = new Date(Date.now() - 72 * 60 * 60 * 1000);\n    const filtered = existing.filter(d => d.timestamp > cutoff);\n    \n    this.marketData.set(data.pair, filtered);\n    return marketData;\n  }\n\n  async getAllMarketData(): Promise<MarketData[]> {\n    const all: MarketData[] = [];\n    for (const data of this.marketData.values()) {\n      if (data.length > 0) {\n        all.push(data[data.length - 1]); // Latest data point for each pair\n      }\n    }\n    return all;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":3977},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const trades = pgTable(\"trades\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  type: text(\"type\", { enum: [\"buy\", \"sell\", \"convert\"] }).notNull(),\n  fromAsset: text(\"from_asset\").notNull(),\n  toAsset: text(\"to_asset\").notNull(),\n  fromAmount: decimal(\"from_amount\", { precision: 20, scale: 8 }).notNull(),\n  toAmount: decimal(\"to_amount\", { precision: 20, scale: 8 }).notNull(),\n  rate: decimal(\"rate\", { precision: 20, scale: 8 }).notNull(),\n  fee: decimal(\"fee\", { precision: 20, scale: 8 }).notNull(),\n  status: text(\"status\", { enum: [\"pending\", \"completed\", \"failed\"] }).default(\"pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const marketData = pgTable(\"market_data\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pair: text(\"pair\").notNull(),\n  price: decimal(\"price\", { precision: 20, scale: 8 }).notNull(),\n  change24h: decimal(\"change_24h\", { precision: 10, scale: 4 }),\n  volume24h: decimal(\"volume_24h\", { precision: 20, scale: 8 }),\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertTradeSchema = createInsertSchema(trades).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMarketDataSchema = createInsertSchema(marketData).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertTrade = z.infer<typeof insertTradeSchema>;\nexport type Trade = typeof trades.$inferSelect;\nexport type InsertMarketData = z.infer<typeof insertMarketDataSchema>;\nexport type MarketData = typeof marketData.$inferSelect;\n","size_bytes":2208},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport ExchangePage from \"@/pages/exchange\";\nimport ExplorePage from \"@/pages/explore\";\nimport WalletsPage from \"@/pages/wallets\";\nimport SendPage from \"@/pages/send\";\nimport ReceivePage from \"@/pages/receive\";\nimport ShitcoinsPage from \"@/pages/shitcoins\";\nimport ActivityPage from \"@/pages/activity\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={ExchangePage} />\n      <Route path=\"/explore\" component={ExplorePage} />\n      <Route path=\"/wallets\" component={WalletsPage} />\n      <Route path=\"/send\" component={SendPage} />\n      <Route path=\"/receive\" component={ReceivePage} />\n      <Route path=\"/shitcoins\" component={ShitcoinsPage} />\n      <Route path=\"/activity\" component={ActivityPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1313},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 5%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 5%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(204, 76%, 49%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(204, 76%, 49%);\n  --chart-1: hsl(173, 58%, 39%);\n  --chart-2: hsl(12, 76%, 61%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar: hsl(222, 84%, 5%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(204, 76%, 49%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(217, 32%, 17%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217, 32%, 17%);\n  --sidebar-ring: hsl(204, 76%, 49%);\n  --font-sans: Inter, \"Open Sans\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: ui-monospace, SFMono-Regular, \"Menlo\", monospace;\n  --radius: 0.75rem;\n  --price-up: hsl(142, 72%, 29%);\n  --price-down: hsl(0, 84%, 60%);\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 5%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 5%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(204, 76%, 49%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(204, 76%, 49%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .price-up {\n    color: var(--price-up);\n  }\n  \n  .price-down {\n    color: var(--price-down);\n  }\n  \n  .chart-container {\n    background: linear-gradient(135deg, var(--background) 0%, var(--secondary) 100%);\n  }\n  \n  .trading-panel {\n    box-shadow: inset 1px 0 0 var(--border);\n  }\n  \n  .mobile-menu {\n    transform: translateX(-100%);\n    transition: transform 0.3s ease-in-out;\n  }\n  \n  .mobile-menu.open {\n    transform: translateX(0);\n  }\n  \n  .ticker-scroll {\n    animation: scroll 30s linear infinite;\n  }\n  \n  @keyframes scroll {\n    0% { transform: translateX(100%); }\n    100% { transform: translateX(-100%); }\n  }\n}\n","size_bytes":2982},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/activity.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"@/components/exchange/sidebar\";\nimport { MobileHeader } from \"@/components/exchange/mobile-header\";\nimport { MarketTicker } from \"@/components/exchange/market-ticker\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  BarChart3, \n  TrendingUp, \n  TrendingDown, \n  Filter, \n  Download,\n  Calendar,\n  ArrowUpRight,\n  ArrowDownLeft,\n  Clock\n} from \"lucide-react\";\n\ninterface Transaction {\n  id: string;\n  type: 'buy' | 'sell' | 'convert' | 'send' | 'receive';\n  pair: string;\n  amount: number;\n  price: number;\n  total: number;\n  fee: number;\n  status: 'completed' | 'pending' | 'failed';\n  timestamp: string;\n  fromAsset?: string;\n  toAsset?: string;\n}\n\n// Mock transaction data\nconst MOCK_TRANSACTIONS: Transaction[] = [\n  {\n    id: 'tx_001',\n    type: 'buy',\n    pair: 'BTC/ZAR',\n    amount: 0.025,\n    price: 1196000,\n    total: 29900,\n    fee: 29.90,\n    status: 'completed',\n    timestamp: '2025-09-05T14:30:00Z'\n  },\n  {\n    id: 'tx_002',\n    type: 'sell',\n    pair: 'ETH/ZAR',\n    amount: 0.5,\n    price: 64000,\n    total: 32000,\n    fee: 32.00,\n    status: 'completed',\n    timestamp: '2025-09-05T13:15:00Z'\n  },\n  {\n    id: 'tx_003',\n    type: 'convert',\n    pair: 'USDT/ZAR',\n    amount: 1000,\n    price: 18.40,\n    total: 18400,\n    fee: 18.40,\n    status: 'completed',\n    timestamp: '2025-09-05T12:45:00Z',\n    fromAsset: 'USDT',\n    toAsset: 'ZAR'\n  },\n  {\n    id: 'tx_004',\n    type: 'buy',\n    pair: 'ETH/ZAR',\n    amount: 1.2,\n    price: 63800,\n    total: 76560,\n    fee: 76.56,\n    status: 'pending',\n    timestamp: '2025-09-05T11:20:00Z'\n  },\n  {\n    id: 'tx_005',\n    type: 'sell',\n    pair: 'BTC/ZAR',\n    amount: 0.01,\n    price: 1195000,\n    total: 11950,\n    fee: 11.95,\n    status: 'failed',\n    timestamp: '2025-09-05T10:10:00Z'\n  },\n  {\n    id: 'tx_006',\n    type: 'send',\n    pair: 'BTC',\n    amount: 0.005,\n    price: 1194000,\n    total: 5970,\n    fee: 0.001,\n    status: 'completed',\n    timestamp: '2025-09-04T18:30:00Z'\n  },\n  {\n    id: 'tx_007',\n    type: 'receive',\n    pair: 'USDT',\n    amount: 500,\n    price: 18.35,\n    total: 9175,\n    fee: 0,\n    status: 'completed',\n    timestamp: '2025-09-04T16:45:00Z'\n  },\n  {\n    id: 'tx_008',\n    type: 'buy',\n    pair: 'SOL/ZAR',\n    amount: 10,\n    price: 2650,\n    total: 26500,\n    fee: 26.50,\n    status: 'completed',\n    timestamp: '2025-09-04T14:20:00Z'\n  }\n];\n\ninterface TransactionRowProps {\n  transaction: Transaction;\n}\n\nfunction TransactionRow({ transaction }: TransactionRowProps) {\n  const formatDate = (timestamp: string) => {\n    const date = new Date(timestamp);\n    return date.toLocaleDateString('en-ZA', {\n      day: '2-digit',\n      month: 'short',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const formatAmount = (amount: number, symbol: string) => {\n    if (symbol.includes('BTC')) return amount.toFixed(7);\n    if (symbol.includes('ETH')) return amount.toFixed(6);\n    if (symbol.includes('ZAR') || symbol.includes('USD')) return amount.toFixed(2);\n    return amount.toFixed(4);\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'buy':\n        return <TrendingUp className=\"w-4 h-4 text-green-600\" />;\n      case 'sell':\n        return <TrendingDown className=\"w-4 h-4 text-red-600\" />;\n      case 'send':\n        return <ArrowUpRight className=\"w-4 h-4 text-blue-600\" />;\n      case 'receive':\n        return <ArrowDownLeft className=\"w-4 h-4 text-purple-600\" />;\n      case 'convert':\n        return <ArrowUpRight className=\"w-4 h-4 text-orange-600\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-gray-600\" />;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <Badge variant=\"secondary\" className=\"text-green-700 bg-green-100\">Completed</Badge>;\n      case 'pending':\n        return <Badge variant=\"secondary\" className=\"text-yellow-700 bg-yellow-100\">Pending</Badge>;\n      case 'failed':\n        return <Badge variant=\"secondary\" className=\"text-red-700 bg-red-100\">Failed</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const getDescription = () => {\n    if (transaction.type === 'convert') {\n      return `Convert ${transaction.fromAsset} to ${transaction.toAsset}`;\n    }\n    if (transaction.type === 'send' || transaction.type === 'receive') {\n      return `${transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1)} ${transaction.pair}`;\n    }\n    return `${transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1)} ${transaction.pair}`;\n  };\n\n  return (\n    <div className=\"flex items-center justify-between p-4 border-b border-border hover:bg-muted/50 transition-colors\">\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"w-10 h-10 bg-muted rounded-full flex items-center justify-center\">\n          {getTypeIcon(transaction.type)}\n        </div>\n        <div>\n          <p className=\"font-medium\" data-testid={`transaction-desc-${transaction.id}`}>\n            {getDescription()}\n          </p>\n          <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n            <span data-testid={`transaction-date-${transaction.id}`}>\n              {formatDate(transaction.timestamp)}\n            </span>\n            <span>•</span>\n            <span data-testid={`transaction-id-${transaction.id}`}>\n              {transaction.id}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"text-right\">\n        <div className=\"flex items-center space-x-3\">\n          <div>\n            <p className=\"font-medium\" data-testid={`transaction-amount-${transaction.id}`}>\n              {formatAmount(transaction.amount, transaction.pair)} {transaction.pair.split('/')[0] || transaction.pair}\n            </p>\n            <p className=\"text-sm text-muted-foreground\">\n              R{transaction.total.toLocaleString()}\n            </p>\n          </div>\n          {getStatusBadge(transaction.status)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function ActivityPage() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [transactions, setTransactions] = useState(MOCK_TRANSACTIONS);\n  const [filterType, setFilterType] = useState('all');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [sortBy, setSortBy] = useState('newest');\n\n  const filteredTransactions = transactions\n    .filter(tx => {\n      if (filterType !== 'all' && tx.type !== filterType) return false;\n      if (filterStatus !== 'all' && tx.status !== filterStatus) return false;\n      if (searchQuery && !tx.pair.toLowerCase().includes(searchQuery.toLowerCase()) && \n          !tx.id.toLowerCase().includes(searchQuery.toLowerCase())) return false;\n      return true;\n    })\n    .sort((a, b) => {\n      switch (sortBy) {\n        case 'newest':\n          return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();\n        case 'oldest':\n          return new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime();\n        case 'amount-high':\n          return b.total - a.total;\n        case 'amount-low':\n          return a.total - b.total;\n        default:\n          return 0;\n      }\n    });\n\n  const stats = {\n    totalTransactions: transactions.length,\n    completedTransactions: transactions.filter(tx => tx.status === 'completed').length,\n    totalVolume: transactions\n      .filter(tx => tx.status === 'completed')\n      .reduce((sum, tx) => sum + tx.total, 0),\n    totalFees: transactions\n      .filter(tx => tx.status === 'completed')\n      .reduce((sum, tx) => sum + tx.fee, 0)\n  };\n\n  const exportToCSV = () => {\n    const headers = [\n      'Transaction ID',\n      'Date',\n      'Type',\n      'Pair/Asset',\n      'Amount',\n      'Price (ZAR)',\n      'Total (ZAR)',\n      'Fee (ZAR)',\n      'Status',\n      'From Asset',\n      'To Asset'\n    ];\n\n    const csvData = filteredTransactions.map(tx => [\n      tx.id,\n      new Date(tx.timestamp).toLocaleString('en-ZA'),\n      tx.type.charAt(0).toUpperCase() + tx.type.slice(1),\n      tx.pair,\n      tx.amount,\n      tx.price,\n      tx.total,\n      tx.fee,\n      tx.status.charAt(0).toUpperCase() + tx.status.slice(1),\n      tx.fromAsset || '',\n      tx.toAsset || ''\n    ]);\n\n    const csvContent = [\n      headers.join(','),\n      ...csvData.map(row => row.map(field => \n        typeof field === 'string' && field.includes(',') \n          ? `\"${field}\"` \n          : field\n      ).join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `transactions_${new Date().toISOString().split('T')[0]}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <div className=\"flex min-h-screen\">\n        {/* Desktop Sidebar */}\n        <div className=\"hidden lg:block\">\n          <Sidebar />\n        </div>\n\n        {/* Mobile Sidebar */}\n        <Sidebar\n          isMobile\n          isOpen={isMobileMenuOpen}\n          onClose={() => setIsMobileMenuOpen(false)}\n        />\n\n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col min-h-screen\">\n          {/* Mobile Header */}\n          <MobileHeader\n            isMobileMenuOpen={isMobileMenuOpen}\n            setIsMobileMenuOpen={setIsMobileMenuOpen}\n          />\n\n          {/* Market Ticker */}\n          <MarketTicker />\n\n          {/* Page Header */}\n          <div className=\"p-6 border-b border-border\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <BarChart3 className=\"w-5 h-5 text-primary\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-bold\">Activity</h1>\n                  <p className=\"text-muted-foreground\">\n                    Your trading and transaction history\n                  </p>\n                </div>\n              </div>\n\n              <Button variant=\"outline\" onClick={exportToCSV} data-testid=\"button-export\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export CSV\n              </Button>\n            </div>\n          </div>\n\n          {/* Stats Cards */}\n          <div className=\"p-6 border-b border-border\">\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Card className=\"p-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold\" data-testid=\"stat-total-transactions\">\n                    {stats.totalTransactions}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">Total Transactions</p>\n                </div>\n              </Card>\n              <Card className=\"p-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-completed-transactions\">\n                    {stats.completedTransactions}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">Completed</p>\n                </div>\n              </Card>\n              <Card className=\"p-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold\" data-testid=\"stat-total-volume\">\n                    R{stats.totalVolume.toLocaleString()}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">Total Volume</p>\n                </div>\n              </Card>\n              <Card className=\"p-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold\" data-testid=\"stat-total-fees\">\n                    R{stats.totalFees.toLocaleString()}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">Total Fees</p>\n                </div>\n              </Card>\n            </div>\n          </div>\n\n          {/* Filters */}\n          <div className=\"p-6 border-b border-border\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div>\n                <Label htmlFor=\"search\">Search</Label>\n                <Input\n                  id=\"search\"\n                  type=\"text\"\n                  placeholder=\"Search transactions...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  data-testid=\"input-search\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"type\">Type</Label>\n                <Select value={filterType} onValueChange={setFilterType}>\n                  <SelectTrigger data-testid=\"select-type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    <SelectItem value=\"buy\">Buy</SelectItem>\n                    <SelectItem value=\"sell\">Sell</SelectItem>\n                    <SelectItem value=\"convert\">Convert</SelectItem>\n                    <SelectItem value=\"send\">Send</SelectItem>\n                    <SelectItem value=\"receive\">Receive</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"status\">Status</Label>\n                <Select value={filterStatus} onValueChange={setFilterStatus}>\n                  <SelectTrigger data-testid=\"select-status\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"failed\">Failed</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"sort\">Sort By</Label>\n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger data-testid=\"select-sort\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"newest\">Newest First</SelectItem>\n                    <SelectItem value=\"oldest\">Oldest First</SelectItem>\n                    <SelectItem value=\"amount-high\">Amount (High)</SelectItem>\n                    <SelectItem value=\"amount-low\">Amount (Low)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n\n          {/* Transaction List */}\n          <div className=\"flex-1\">\n            {filteredTransactions.length > 0 ? (\n              <div>\n                <div className=\"p-4 border-b border-border bg-muted/50\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    Showing {filteredTransactions.length} of {transactions.length} transactions\n                  </p>\n                </div>\n                <div className=\"max-h-[600px] overflow-y-auto\">\n                  {filteredTransactions.map((transaction) => (\n                    <TransactionRow\n                      key={transaction.id}\n                      transaction={transaction}\n                    />\n                  ))}\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <BarChart3 className=\"w-8 h-8 text-muted-foreground\" />\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">No Transactions Found</h3>\n                <p className=\"text-muted-foreground max-w-md mx-auto\">\n                  {searchQuery || filterType !== 'all' || filterStatus !== 'all' \n                    ? 'No transactions match your current filters. Try adjusting your search criteria.'\n                    : 'You haven\\'t made any transactions yet. Start trading to see your activity here.'\n                  }\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17071},"client/src/pages/exchange.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { Sidebar } from \"@/components/exchange/sidebar\";\nimport { MobileHeader } from \"@/components/exchange/mobile-header\";\nimport { MarketTicker } from \"@/components/exchange/market-ticker\";\nimport { ChartPanel } from \"@/components/exchange/chart-panel\";\nimport { TradingPanel } from \"@/components/exchange/trading-panel\";\n\nexport default function ExchangePage() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [currentPair, setCurrentPair] = useState(\"BTC/ZAR\");\n  const [wsConnection, setWsConnection] = useState<WebSocket | null>(null);\n\n  // WebSocket connection for real-time updates\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    const ws = new WebSocket(wsUrl);\n    \n    ws.onopen = () => {\n      console.log(\"WebSocket connected\");\n      setWsConnection(ws);\n    };\n    \n    ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        if (data.type === \"price_update\") {\n          // Handle real-time price updates\n          console.log(\"Price update received:\", data.data);\n        }\n      } catch (error) {\n        console.error(\"Invalid WebSocket message:\", error);\n      }\n    };\n    \n    ws.onclose = () => {\n      console.log(\"WebSocket disconnected\");\n      setWsConnection(null);\n    };\n    \n    ws.onerror = (error) => {\n      console.error(\"WebSocket error:\", error);\n    };\n\n    return () => {\n      ws.close();\n    };\n  }, []);\n\n  // Handle pair changes from trading panel\n  const handlePairChange = (from: string, to: string, action: \"buy\" | \"sell\" | \"convert\") => {\n    let pair;\n    if (action === \"buy\") pair = `${to}/${from}`;\n    else if (action === \"sell\") pair = `${from}/${to}`;\n    else {\n      // For convert, prioritize crypto assets for chart display\n      const cryptoAssets = [\"BTC\", \"ETH\", \"USDT\"];\n      \n      if (cryptoAssets.includes(from)) pair = `${from}/ZAR`;\n      else if (cryptoAssets.includes(to)) pair = `${to}/ZAR`;\n      else pair = `${from}/${to}`;\n    }\n\n    setCurrentPair(pair);\n  };\n\n  // Close mobile menu when clicking outside or on navigation\n  useEffect(() => {\n    const handleResize = () => {\n      if (window.innerWidth >= 1024) {\n        setIsMobileMenuOpen(false);\n      }\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <div className=\"flex min-h-screen\">\n        {/* Desktop Sidebar */}\n        <div className=\"hidden lg:block\">\n          <Sidebar />\n        </div>\n\n        {/* Mobile Sidebar */}\n        <Sidebar\n          isMobile\n          isOpen={isMobileMenuOpen}\n          onClose={() => setIsMobileMenuOpen(false)}\n        />\n\n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col lg:flex-row min-h-screen\">\n          {/* Center Panel - Chart and Market Data */}\n          <main className=\"flex-1 flex flex-col\">\n            {/* Mobile Header */}\n            <MobileHeader\n              isMobileMenuOpen={isMobileMenuOpen}\n              setIsMobileMenuOpen={setIsMobileMenuOpen}\n            />\n\n            {/* Market Ticker */}\n            <MarketTicker />\n\n            {/* Chart Section */}\n            <ChartPanel currentPair={currentPair} />\n          </main>\n\n          {/* Trading Panel */}\n          <TradingPanel onPairChange={handlePairChange} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3609},"client/src/pages/explore.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"@/components/exchange/sidebar\";\nimport { MobileHeader } from \"@/components/exchange/mobile-header\";\nimport { MarketTicker } from \"@/components/exchange/market-ticker\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\n// Top 20 tokens data\nconst TOP_TOKENS = [\n  { id: 'bitcoin', symbol: 'BTC', name: 'Bitcoin', price: 65000, change: 2.34, marketCap: '1.2T', icon: '₿' },\n  { id: 'ethereum', symbol: 'ETH', name: 'Ethereum', price: 3500, change: -1.25, marketCap: '420B', icon: 'Ξ' },\n  { id: 'tether', symbol: 'USDT', name: 'Tether', price: 1.00, change: 0.01, marketCap: '95B', icon: '₮' },\n  { id: 'binancecoin', symbol: 'BNB', name: 'BNB', price: 620, change: 3.45, marketCap: '95B', icon: 'B' },\n  { id: 'solana', symbol: 'SOL', name: 'Solana', price: 155, change: 5.67, marketCap: '70B', icon: 'S' },\n  { id: 'usd-coin', symbol: 'USDC', name: 'USD Coin', price: 1.00, change: 0.02, marketCap: '32B', icon: 'C' },\n  { id: 'xrp', symbol: 'XRP', name: 'XRP', price: 0.62, change: -2.15, marketCap: '35B', icon: 'X' },\n  { id: 'dogecoin', symbol: 'DOGE', name: 'Dogecoin', price: 0.38, change: 8.92, marketCap: '55B', icon: 'D' },\n  { id: 'cardano', symbol: 'ADA', name: 'Cardano', price: 1.25, change: 1.84, marketCap: '44B', icon: 'A' },\n  { id: 'avalanche-2', symbol: 'AVAX', name: 'Avalanche', price: 42, change: -0.85, marketCap: '16B', icon: 'V' },\n  { id: 'chainlink', symbol: 'LINK', name: 'Chainlink', price: 14.5, change: 4.23, marketCap: '8.5B', icon: 'L' },\n  { id: 'polkadot', symbol: 'DOT', name: 'Polkadot', price: 7.8, change: -3.12, marketCap: '11B', icon: 'P' },\n  { id: 'polygon', symbol: 'MATIC', name: 'Polygon', price: 1.15, change: 2.67, marketCap: '11B', icon: 'M' },\n  { id: 'uniswap', symbol: 'UNI', name: 'Uniswap', price: 9.2, change: -1.44, marketCap: '5.5B', icon: 'U' },\n  { id: 'litecoin', symbol: 'LTC', name: 'Litecoin', price: 95, change: 0.78, marketCap: '7B', icon: 'Ł' },\n  { id: 'near', symbol: 'NEAR', name: 'NEAR Protocol', price: 5.4, change: 6.21, marketCap: '5.9B', icon: 'N' },\n  { id: 'arbitrum', symbol: 'ARB', name: 'Arbitrum', price: 2.1, change: -2.33, marketCap: '2.8B', icon: 'R' },\n  { id: 'optimism', symbol: 'OP', name: 'Optimism', price: 3.8, change: 1.95, marketCap: '3.2B', icon: 'O' },\n  { id: 'cosmos', symbol: 'ATOM', name: 'Cosmos', price: 12.5, change: -0.56, marketCap: '4.9B', icon: 'T' },\n  { id: 'aptos', symbol: 'APT', name: 'Aptos', price: 11.8, change: 4.12, marketCap: '4.1B', icon: 'PT' }\n];\n\nconst FIAT_CURRENCIES = [\"ZAR\", \"USD\", \"EUR\", \"GBP\"];\n\ninterface TokenCardProps {\n  token: typeof TOP_TOKENS[0];\n  isSelected: boolean;\n  onClick: () => void;\n}\n\nfunction TokenCard({ token, isSelected, onClick }: TokenCardProps) {\n  const priceInZAR = token.price * 18.5; // Convert USD to ZAR\n  \n  return (\n    <div\n      className={`\n        p-4 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md\n        ${isSelected \n          ? 'border-primary bg-primary/5 shadow-md ring-2 ring-primary/20' \n          : 'border-border bg-card hover:border-primary/30'\n        }\n      `}\n      onClick={onClick}\n      data-testid={`token-card-${token.id}`}\n    >\n      <div className=\"flex items-start justify-between mb-3\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center\">\n            <span className=\"text-lg font-bold text-primary\">{token.icon}</span>\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-sm\" data-testid={`text-name-${token.id}`}>\n              {token.name}\n            </h3>\n            <p className=\"text-xs text-muted-foreground\" data-testid={`text-symbol-${token.id}`}>\n              {token.symbol}\n            </p>\n          </div>\n        </div>\n        <div \n          className={`\n            text-xs font-medium px-2 py-1 rounded-full\n            ${token.change >= 0 \n              ? 'text-green-600 bg-green-100 dark:text-green-400 dark:bg-green-900/30' \n              : 'text-red-600 bg-red-100 dark:text-red-400 dark:bg-red-900/30'\n            }\n          `}\n          data-testid={`text-change-${token.id}`}\n        >\n          {token.change >= 0 ? '+' : ''}{token.change.toFixed(2)}%\n        </div>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <div>\n          <p className=\"text-xs text-muted-foreground\">Price (ZAR)</p>\n          <p className=\"font-mono text-sm font-semibold\" data-testid={`text-price-zar-${token.id}`}>\n            R{priceInZAR.toLocaleString()}\n          </p>\n        </div>\n        <div>\n          <p className=\"text-xs text-muted-foreground\">Price (USD)</p>\n          <p className=\"font-mono text-xs\" data-testid={`text-price-usd-${token.id}`}>\n            ${token.price.toLocaleString()}\n          </p>\n        </div>\n        <div>\n          <p className=\"text-xs text-muted-foreground\">Market Cap</p>\n          <p className=\"text-xs font-medium\" data-testid={`text-marketcap-${token.id}`}>\n            {token.marketCap}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\ntype ActionTab = \"buy\" | \"sell\" | \"convert\";\n\ninterface TradingPanelProps {\n  selectedToken: typeof TOP_TOKENS[0] | null;\n}\n\nfunction TradingPanel({ selectedToken }: TradingPanelProps) {\n  const [activeTab, setActiveTab] = useState<ActionTab>(\"buy\");\n  const [fromCurrency, setFromCurrency] = useState(\"ZAR\");\n  const [toCurrency, setToCurrency] = useState(\"USD\");\n  const [amount, setAmount] = useState(\"\");\n\n  if (!selectedToken) {\n    return (\n      <aside className=\"w-full lg:w-96 bg-card border-l border-border trading-panel\">\n        <div className=\"p-6 text-center\">\n          <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n            <span className=\"text-2xl\">📊</span>\n          </div>\n          <h3 className=\"font-semibold mb-2\">Select a Token</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Click on any token from the list to start trading\n          </p>\n        </div>\n      </aside>\n    );\n  }\n\n  const TabButton = ({ tab, label }: { tab: ActionTab; label: string }) => (\n    <Button\n      variant={activeTab === tab ? \"default\" : \"ghost\"}\n      size=\"sm\"\n      className=\"flex-1\"\n      onClick={() => setActiveTab(tab)}\n      data-testid={`tab-${tab}`}\n    >\n      {label}\n    </Button>\n  );\n\n  const calculateAmount = () => {\n    if (!amount || isNaN(parseFloat(amount))) return \"0.00\";\n    const inputAmount = parseFloat(amount);\n    \n    if (activeTab === \"buy\") {\n      // Buying token with fiat\n      const tokenPriceInZAR = selectedToken.price * 18.5;\n      return (inputAmount / tokenPriceInZAR).toFixed(6);\n    } else if (activeTab === \"sell\") {\n      // Selling token for fiat\n      const tokenPriceInZAR = selectedToken.price * 18.5;\n      return (inputAmount * tokenPriceInZAR).toFixed(2);\n    }\n    \n    return \"0.00\";\n  };\n\n  return (\n    <aside className=\"w-full lg:w-96 bg-card border-l border-border trading-panel\">\n      <div className=\"h-full flex flex-col\">\n        {/* Header */}\n        <div className=\"p-4 border-b border-border\">\n          <div className=\"flex items-center space-x-3 mb-4\">\n            <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n              <span className=\"text-sm font-bold text-primary\">{selectedToken.icon}</span>\n            </div>\n            <div>\n              <h3 className=\"font-semibold\">{selectedToken.name}</h3>\n              <p className=\"text-xs text-muted-foreground\">{selectedToken.symbol}</p>\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-3 gap-1 p-1 bg-muted rounded-lg\">\n            <TabButton tab=\"buy\" label=\"Buy\" />\n            <TabButton tab=\"sell\" label=\"Sell\" />\n            <TabButton tab=\"convert\" label=\"Convert\" />\n          </div>\n        </div>\n\n        {/* Trading Form */}\n        <div className=\"flex-1 p-4 space-y-4\">\n          {activeTab === \"buy\" && (\n            <div className=\"space-y-4\" data-testid=\"form-buy\">\n              <div>\n                <Label>Pay with</Label>\n                <Select value={fromCurrency} onValueChange={setFromCurrency}>\n                  <SelectTrigger data-testid=\"select-pay-with\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {FIAT_CURRENCIES.map((currency) => (\n                      <SelectItem key={currency} value={currency}>\n                        {currency}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label>Amount ({fromCurrency})</Label>\n                <Input\n                  type=\"text\"\n                  inputMode=\"decimal\"\n                  placeholder=\"0.00\"\n                  value={amount}\n                  onChange={(e) => setAmount(e.target.value.replace(/[^0-9.]/g, \"\"))}\n                  data-testid=\"input-amount\"\n                />\n              </div>\n              \n              <div className=\"bg-muted rounded-lg p-3\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>You receive</span>\n                  <span className=\"font-mono\" data-testid=\"text-receive-amount\">\n                    {calculateAmount()} {selectedToken.symbol}\n                  </span>\n                </div>\n              </div>\n              \n              <Button \n                className=\"w-full\" \n                size=\"lg\"\n                disabled={!amount || parseFloat(amount) <= 0}\n                data-testid=\"button-buy\"\n              >\n                Buy {selectedToken.symbol}\n              </Button>\n            </div>\n          )}\n\n          {activeTab === \"sell\" && (\n            <div className=\"space-y-4\" data-testid=\"form-sell\">\n              <div>\n                <Label>Amount ({selectedToken.symbol})</Label>\n                <Input\n                  type=\"text\"\n                  inputMode=\"decimal\"\n                  placeholder=\"0.000000\"\n                  value={amount}\n                  onChange={(e) => setAmount(e.target.value.replace(/[^0-9.]/g, \"\"))}\n                  data-testid=\"input-amount-sell\"\n                />\n              </div>\n              \n              <div>\n                <Label>Receive</Label>\n                <Select value={toCurrency} onValueChange={setToCurrency}>\n                  <SelectTrigger data-testid=\"select-receive\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {FIAT_CURRENCIES.map((currency) => (\n                      <SelectItem key={currency} value={currency}>\n                        {currency}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"bg-muted rounded-lg p-3\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>You receive</span>\n                  <span className=\"font-mono\" data-testid=\"text-sell-amount\">\n                    R{calculateAmount()}\n                  </span>\n                </div>\n              </div>\n              \n              <Button \n                variant=\"destructive\"\n                className=\"w-full\" \n                size=\"lg\"\n                disabled={!amount || parseFloat(amount) <= 0}\n                data-testid=\"button-sell\"\n              >\n                Sell {selectedToken.symbol}\n              </Button>\n            </div>\n          )}\n\n          {activeTab === \"convert\" && (\n            <div className=\"space-y-4\" data-testid=\"form-convert\">\n              <div>\n                <Label>From</Label>\n                <Input\n                  type=\"text\"\n                  inputMode=\"decimal\"\n                  placeholder=\"0.000000\"\n                  value={amount}\n                  onChange={(e) => setAmount(e.target.value.replace(/[^0-9.]/g, \"\"))}\n                  data-testid=\"input-convert-amount\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">{selectedToken.symbol}</p>\n              </div>\n              \n              <div className=\"bg-muted rounded-lg p-3\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Estimated value</span>\n                  <span className=\"font-mono\" data-testid=\"text-convert-value\">\n                    R{calculateAmount()}\n                  </span>\n                </div>\n              </div>\n              \n              <Button \n                className=\"w-full\" \n                size=\"lg\"\n                disabled={!amount || parseFloat(amount) <= 0}\n                data-testid=\"button-convert\"\n              >\n                Convert {selectedToken.symbol}\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n    </aside>\n  );\n}\n\nexport default function ExplorePage() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [selectedToken, setSelectedToken] = useState<typeof TOP_TOKENS[0] | null>(null);\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <div className=\"flex min-h-screen\">\n        {/* Desktop Sidebar */}\n        <div className=\"hidden lg:block\">\n          <Sidebar />\n        </div>\n\n        {/* Mobile Sidebar */}\n        <Sidebar\n          isMobile\n          isOpen={isMobileMenuOpen}\n          onClose={() => setIsMobileMenuOpen(false)}\n        />\n\n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col lg:flex-row min-h-screen\">\n          {/* Center Panel - Token Grid */}\n          <main className=\"flex-1 flex flex-col\">\n            {/* Mobile Header */}\n            <MobileHeader\n              isMobileMenuOpen={isMobileMenuOpen}\n              setIsMobileMenuOpen={setIsMobileMenuOpen}\n            />\n\n            {/* Market Ticker */}\n            <MarketTicker />\n\n            {/* Page Header */}\n            <div className=\"p-6 border-b border-border\">\n              <h1 className=\"text-2xl font-bold mb-2\">Explore Tokens</h1>\n              <p className=\"text-muted-foreground\">\n                Discover and trade the top 20 cryptocurrencies\n              </p>\n            </div>\n\n            {/* Token Grid */}\n            <div className=\"flex-1 p-6\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-4\">\n                {TOP_TOKENS.map((token) => (\n                  <TokenCard\n                    key={token.id}\n                    token={token}\n                    isSelected={selectedToken?.id === token.id}\n                    onClick={() => setSelectedToken(token)}\n                  />\n                ))}\n              </div>\n            </div>\n          </main>\n\n          {/* Trading Panel */}\n          <TradingPanel selectedToken={selectedToken} />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15312},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/receive.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Sidebar } from \"@/components/exchange/sidebar\";\nimport { MobileHeader } from \"@/components/exchange/mobile-header\";\nimport { MarketTicker } from \"@/components/exchange/market-ticker\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { ArrowLeft, Download, Copy, QrCode, CheckCircle } from \"lucide-react\";\n\n// Mock wallet data\nconst WALLETS = [\n  {\n    id: 'btc-wallet',\n    name: 'Bitcoin Wallet',\n    symbol: 'BTC',\n    icon: '₿',\n    balance: 0.0234567,\n    balanceZAR: 28125.45,\n    address: '1A2B3C4D5E6F7G8H9I0J1K2L3M4N5O6P7Q8R9S',\n    color: 'bg-orange-500',\n    textColor: 'text-orange-600'\n  },\n  {\n    id: 'eth-wallet',\n    name: 'Ethereum Wallet',\n    symbol: 'ETH',\n    icon: 'Ξ',\n    balance: 1.247891,\n    balanceZAR: 80423.12,\n    address: '0x1234567890abcdef1234567890abcdef12345678',\n    color: 'bg-blue-500',\n    textColor: 'text-blue-600'\n  },\n  {\n    id: 'usdt-wallet',\n    name: 'Tether Wallet',\n    symbol: 'USDT',\n    icon: '₮',\n    balance: 2500.00,\n    balanceZAR: 46250.00,\n    address: '0xabcdef1234567890abcdef1234567890abcdef12',\n    color: 'bg-green-500',\n    textColor: 'text-green-600'\n  },\n  {\n    id: 'zar-wallet',\n    name: 'ZAR Wallet',\n    symbol: 'ZAR',\n    icon: 'R',\n    balance: 15420.75,\n    balanceZAR: 15420.75,\n    address: 'ZAR-WALLET-001',\n    color: 'bg-purple-500',\n    textColor: 'text-purple-600'\n  },\n  {\n    id: 'usd-wallet',\n    name: 'USD Wallet',\n    symbol: 'USD',\n    icon: '$',\n    balance: 850.00,\n    balanceZAR: 15725.00,\n    address: 'USD-WALLET-001',\n    color: 'bg-green-600',\n    textColor: 'text-green-700'\n  }\n];\n\nexport default function ReceivePage() {\n  const [, setLocation] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [selectedWallet, setSelectedWallet] = useState('btc-wallet');\n  const [requestAmount, setRequestAmount] = useState('');\n  const [message, setMessage] = useState('');\n  const [copied, setCopied] = useState(false);\n\n  const wallet = WALLETS.find(w => w.id === selectedWallet) || WALLETS[0];\n\n  const formatBalance = (amount: number, symbol: string) => {\n    if (symbol === 'BTC') return amount.toFixed(7);\n    if (symbol === 'ETH') return amount.toFixed(6);\n    if (['ZAR', 'USD'].includes(symbol)) return amount.toFixed(2);\n    return amount.toFixed(4);\n  };\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error('Failed to copy: ', err);\n    }\n  };\n\n  const generatePaymentLink = () => {\n    const amount = parseFloat(requestAmount) || 0;\n    if (amount > 0) {\n      return `${wallet.symbol.toLowerCase()}:${wallet.address}?amount=${amount}&message=${encodeURIComponent(message)}`;\n    }\n    return wallet.address;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <div className=\"flex min-h-screen\">\n        {/* Desktop Sidebar */}\n        <div className=\"hidden lg:block\">\n          <Sidebar />\n        </div>\n\n        {/* Mobile Sidebar */}\n        <Sidebar\n          isMobile\n          isOpen={isMobileMenuOpen}\n          onClose={() => setIsMobileMenuOpen(false)}\n        />\n\n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col min-h-screen\">\n          {/* Mobile Header */}\n          <MobileHeader\n            isMobileMenuOpen={isMobileMenuOpen}\n            setIsMobileMenuOpen={setIsMobileMenuOpen}\n          />\n\n          {/* Market Ticker */}\n          <MarketTicker />\n\n          {/* Page Header */}\n          <div className=\"p-6 border-b border-border\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setLocation('/wallets')}\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"w-5 h-5\" />\n              </Button>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <Download className=\"w-5 h-5 text-primary\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-bold\">Receive Funds</h1>\n                  <p className=\"text-muted-foreground\">\n                    Share your wallet address to receive payments\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Receive Form */}\n          <div className=\"flex-1 p-6\">\n            <div className=\"max-w-2xl mx-auto space-y-6\">\n              {/* Wallet Selection */}\n              <Card className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Receive To</h3>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"wallet\">Select Wallet</Label>\n                    <Select value={selectedWallet} onValueChange={setSelectedWallet}>\n                      <SelectTrigger data-testid=\"select-wallet\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {WALLETS.map((wallet) => (\n                          <SelectItem key={wallet.id} value={wallet.id}>\n                            <div className=\"flex items-center space-x-3\">\n                              <div className={`w-6 h-6 rounded-full ${wallet.color} flex items-center justify-center`}>\n                                <span className=\"text-white text-xs font-bold\">{wallet.icon}</span>\n                              </div>\n                              <span>{wallet.name}</span>\n                              <span className=\"text-muted-foreground\">\n                                {formatBalance(wallet.balance, wallet.symbol)} {wallet.symbol}\n                              </span>\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"bg-muted rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Current Balance</span>\n                      <div className=\"text-right\">\n                        <p className=\"font-mono font-semibold\" data-testid=\"current-balance\">\n                          {formatBalance(wallet.balance, wallet.symbol)} {wallet.symbol}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          R{wallet.balanceZAR.toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n\n              {/* Wallet Address */}\n              <Card className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Your {wallet.symbol} Address</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"bg-muted rounded-lg p-4\">\n                    <div className=\"flex items-center justify-center mb-4\">\n                      <div className=\"w-32 h-32 bg-white rounded-lg flex items-center justify-center\">\n                        <QrCode className=\"w-20 h-20 text-gray-800\" />\n                      </div>\n                    </div>\n                    <p className=\"text-center text-sm text-muted-foreground mb-2\">\n                      Scan QR code to get address\n                    </p>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"address\">Wallet Address</Label>\n                    <div className=\"flex space-x-2\">\n                      <Input\n                        id=\"address\"\n                        value={wallet.address}\n                        readOnly\n                        className=\"font-mono text-sm\"\n                        data-testid=\"wallet-address\"\n                      />\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => copyToClipboard(wallet.address)}\n                        className=\"shrink-0\"\n                        data-testid=\"button-copy-address\"\n                      >\n                        {copied ? (\n                          <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                        ) : (\n                          <Copy className=\"w-4 h-4\" />\n                        )}\n                      </Button>\n                    </div>\n                    {copied && (\n                      <p className=\"text-sm text-green-600 mt-1 flex items-center\">\n                        <CheckCircle className=\"w-4 h-4 mr-1\" />\n                        Address copied to clipboard!\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </Card>\n\n              {/* Payment Request (Optional) */}\n              <Card className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Payment Request (Optional)</h3>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"amount\">Request Amount ({wallet.symbol})</Label>\n                    <Input\n                      id=\"amount\"\n                      type=\"text\"\n                      inputMode=\"decimal\"\n                      placeholder=\"0.00\"\n                      value={requestAmount}\n                      onChange={(e) => setRequestAmount(e.target.value.replace(/[^0-9.]/g, \"\"))}\n                      data-testid=\"input-request-amount\"\n                    />\n                    {requestAmount && (\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        ≈ R{(parseFloat(requestAmount) * (wallet.balanceZAR / wallet.balance)).toLocaleString()}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"message\">Message</Label>\n                    <Input\n                      id=\"message\"\n                      type=\"text\"\n                      placeholder=\"Payment for...\"\n                      value={message}\n                      onChange={(e) => setMessage(e.target.value)}\n                      data-testid=\"input-message\"\n                    />\n                  </div>\n\n                  {(requestAmount || message) && (\n                    <div className=\"bg-muted rounded-lg p-4\">\n                      <h4 className=\"font-medium mb-2\">Payment Link</h4>\n                      <div className=\"flex space-x-2\">\n                        <Input\n                          value={generatePaymentLink()}\n                          readOnly\n                          className=\"font-mono text-xs\"\n                          data-testid=\"payment-link\"\n                        />\n                        <Button\n                          variant=\"outline\"\n                          onClick={() => copyToClipboard(generatePaymentLink())}\n                          className=\"shrink-0\"\n                          data-testid=\"button-copy-link\"\n                        >\n                          <Copy className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground mt-2\">\n                        Share this link to request a specific amount\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </Card>\n\n              {/* Instructions */}\n              <Card className=\"p-6 bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800\">\n                <h3 className=\"text-lg font-semibold mb-3 text-blue-900 dark:text-blue-100\">\n                  How to Receive {wallet.symbol}\n                </h3>\n                <ul className=\"space-y-2 text-sm text-blue-800 dark:text-blue-200\">\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"font-semibold\">1.</span>\n                    <span>Share your wallet address or QR code with the sender</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"font-semibold\">2.</span>\n                    <span>Wait for the transaction to be confirmed on the network</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"font-semibold\">3.</span>\n                    <span>Funds will appear in your wallet once confirmed</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"font-semibold\">⚠️</span>\n                    <span>Only send {wallet.symbol} to this address. Other tokens may be lost.</span>\n                  </li>\n                </ul>\n              </Card>\n\n              {/* Action Button */}\n              <Button\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={() => setLocation('/wallets')}\n                data-testid=\"button-done\"\n              >\n                Done\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13778},"client/src/pages/send.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Sidebar } from \"@/components/exchange/sidebar\";\nimport { MobileHeader } from \"@/components/exchange/mobile-header\";\nimport { MarketTicker } from \"@/components/exchange/market-ticker\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { ArrowLeft, Send, AlertTriangle, CheckCircle } from \"lucide-react\";\n\n// Mock wallet data\nconst WALLETS = [\n  {\n    id: 'btc-wallet',\n    name: 'Bitcoin Wallet',\n    symbol: 'BTC',\n    icon: '₿',\n    balance: 0.0234567,\n    balanceZAR: 28125.45,\n    color: 'bg-orange-500',\n    textColor: 'text-orange-600'\n  },\n  {\n    id: 'eth-wallet',\n    name: 'Ethereum Wallet',\n    symbol: 'ETH',\n    icon: 'Ξ',\n    balance: 1.247891,\n    balanceZAR: 80423.12,\n    color: 'bg-blue-500',\n    textColor: 'text-blue-600'\n  },\n  {\n    id: 'usdt-wallet',\n    name: 'Tether Wallet',\n    symbol: 'USDT',\n    icon: '₮',\n    balance: 2500.00,\n    balanceZAR: 46250.00,\n    color: 'bg-green-500',\n    textColor: 'text-green-600'\n  },\n  {\n    id: 'zar-wallet',\n    name: 'ZAR Wallet',\n    symbol: 'ZAR',\n    icon: 'R',\n    balance: 15420.75,\n    balanceZAR: 15420.75,\n    color: 'bg-purple-500',\n    textColor: 'text-purple-600'\n  },\n  {\n    id: 'usd-wallet',\n    name: 'USD Wallet',\n    symbol: 'USD',\n    icon: '$',\n    balance: 850.00,\n    balanceZAR: 15725.00,\n    color: 'bg-green-600',\n    textColor: 'text-green-700'\n  }\n];\n\nexport default function SendPage() {\n  const [, setLocation] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [selectedWallet, setSelectedWallet] = useState('btc-wallet');\n  const [recipientAddress, setRecipientAddress] = useState('');\n  const [amount, setAmount] = useState('');\n  const [memo, setMemo] = useState('');\n  const [isConfirming, setIsConfirming] = useState(false);\n\n  const wallet = WALLETS.find(w => w.id === selectedWallet) || WALLETS[0];\n  const numAmount = parseFloat(amount) || 0;\n  const isValidAmount = numAmount > 0 && numAmount <= wallet.balance;\n  const isValidAddress = recipientAddress.length > 10;\n  const canSubmit = isValidAmount && isValidAddress;\n\n  const formatBalance = (amount: number, symbol: string) => {\n    if (symbol === 'BTC') return amount.toFixed(7);\n    if (symbol === 'ETH') return amount.toFixed(6);\n    if (['ZAR', 'USD'].includes(symbol)) return amount.toFixed(2);\n    return amount.toFixed(4);\n  };\n\n  const handleSend = () => {\n    setIsConfirming(true);\n    // Simulate sending\n    setTimeout(() => {\n      setIsConfirming(false);\n      setLocation('/wallets');\n    }, 2000);\n  };\n\n  if (isConfirming) {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground flex items-center justify-center\">\n        <Card className=\"p-8 max-w-md mx-auto text-center\">\n          <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Send className=\"w-8 h-8 text-primary animate-pulse\" />\n          </div>\n          <h2 className=\"text-xl font-semibold mb-2\">Sending Transaction</h2>\n          <p className=\"text-muted-foreground mb-4\">\n            Please wait while we process your transaction...\n          </p>\n          <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto\" />\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <div className=\"flex min-h-screen\">\n        {/* Desktop Sidebar */}\n        <div className=\"hidden lg:block\">\n          <Sidebar />\n        </div>\n\n        {/* Mobile Sidebar */}\n        <Sidebar\n          isMobile\n          isOpen={isMobileMenuOpen}\n          onClose={() => setIsMobileMenuOpen(false)}\n        />\n\n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col min-h-screen\">\n          {/* Mobile Header */}\n          <MobileHeader\n            isMobileMenuOpen={isMobileMenuOpen}\n            setIsMobileMenuOpen={setIsMobileMenuOpen}\n          />\n\n          {/* Market Ticker */}\n          <MarketTicker />\n\n          {/* Page Header */}\n          <div className=\"p-6 border-b border-border\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setLocation('/wallets')}\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"w-5 h-5\" />\n              </Button>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <Send className=\"w-5 h-5 text-primary\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-bold\">Send Funds</h1>\n                  <p className=\"text-muted-foreground\">\n                    Transfer funds to another wallet\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Send Form */}\n          <div className=\"flex-1 p-6\">\n            <div className=\"max-w-2xl mx-auto space-y-6\">\n              {/* Wallet Selection */}\n              <Card className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">From Wallet</h3>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"wallet\">Select Wallet</Label>\n                    <Select value={selectedWallet} onValueChange={setSelectedWallet}>\n                      <SelectTrigger data-testid=\"select-wallet\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {WALLETS.map((wallet) => (\n                          <SelectItem key={wallet.id} value={wallet.id}>\n                            <div className=\"flex items-center space-x-3\">\n                              <div className={`w-6 h-6 rounded-full ${wallet.color} flex items-center justify-center`}>\n                                <span className=\"text-white text-xs font-bold\">{wallet.icon}</span>\n                              </div>\n                              <span>{wallet.name}</span>\n                              <span className=\"text-muted-foreground\">\n                                {formatBalance(wallet.balance, wallet.symbol)} {wallet.symbol}\n                              </span>\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"bg-muted rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Available Balance</span>\n                      <div className=\"text-right\">\n                        <p className=\"font-mono font-semibold\" data-testid=\"available-balance\">\n                          {formatBalance(wallet.balance, wallet.symbol)} {wallet.symbol}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          R{wallet.balanceZAR.toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n\n              {/* Transaction Details */}\n              <Card className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Transaction Details</h3>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"address\">Recipient Address</Label>\n                    <Input\n                      id=\"address\"\n                      type=\"text\"\n                      placeholder={`Enter ${wallet.symbol} wallet address...`}\n                      value={recipientAddress}\n                      onChange={(e) => setRecipientAddress(e.target.value)}\n                      data-testid=\"input-address\"\n                    />\n                    {recipientAddress && !isValidAddress && (\n                      <p className=\"text-sm text-destructive mt-1 flex items-center\">\n                        <AlertTriangle className=\"w-4 h-4 mr-1\" />\n                        Please enter a valid wallet address\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"amount\">Amount ({wallet.symbol})</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"amount\"\n                        type=\"text\"\n                        inputMode=\"decimal\"\n                        placeholder=\"0.00\"\n                        value={amount}\n                        onChange={(e) => setAmount(e.target.value.replace(/[^0-9.]/g, \"\"))}\n                        data-testid=\"input-amount\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-2 top-1/2 transform -translate-y-1/2 text-xs\"\n                        onClick={() => setAmount(wallet.balance.toString())}\n                        data-testid=\"button-max\"\n                      >\n                        MAX\n                      </Button>\n                    </div>\n                    {amount && !isValidAmount && (\n                      <p className=\"text-sm text-destructive mt-1 flex items-center\">\n                        <AlertTriangle className=\"w-4 h-4 mr-1\" />\n                        {numAmount > wallet.balance ? 'Insufficient balance' : 'Enter a valid amount'}\n                      </p>\n                    )}\n                    {amount && isValidAmount && (\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        ≈ R{(numAmount * (wallet.balanceZAR / wallet.balance)).toLocaleString()}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"memo\">Memo (Optional)</Label>\n                    <Input\n                      id=\"memo\"\n                      type=\"text\"\n                      placeholder=\"Add a note for this transaction...\"\n                      value={memo}\n                      onChange={(e) => setMemo(e.target.value)}\n                      data-testid=\"input-memo\"\n                    />\n                  </div>\n                </div>\n              </Card>\n\n              {/* Transaction Summary */}\n              <Card className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Transaction Summary</h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Amount</span>\n                    <span className=\"font-mono\" data-testid=\"summary-amount\">\n                      {amount || '0'} {wallet.symbol}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Network Fee</span>\n                    <span className=\"font-mono\">~0.001 {wallet.symbol}</span>\n                  </div>\n                  <div className=\"h-px bg-border\" />\n                  <div className=\"flex justify-between font-semibold\">\n                    <span>Total</span>\n                    <span className=\"font-mono\" data-testid=\"summary-total\">\n                      {(numAmount + 0.001).toFixed(wallet.symbol === 'BTC' ? 7 : 4)} {wallet.symbol}\n                    </span>\n                  </div>\n                </div>\n              </Card>\n\n              {/* Action Buttons */}\n              <div className=\"flex space-x-3\">\n                <Button\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  onClick={() => setLocation('/wallets')}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  className=\"flex-1\"\n                  onClick={handleSend}\n                  disabled={!canSubmit}\n                  data-testid=\"button-send\"\n                >\n                  <Send className=\"w-4 h-4 mr-2\" />\n                  Send {wallet.symbol}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12893},"client/src/pages/shitcoins.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"@/components/exchange/sidebar\";\nimport { MobileHeader } from \"@/components/exchange/mobile-header\";\nimport { MarketTicker } from \"@/components/exchange/market-ticker\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, ExternalLink, TrendingUp, TrendingDown, Copy, CheckCircle, AlertTriangle } from \"lucide-react\";\n\ninterface TokenResult {\n  address: string;\n  symbol: string;\n  name: string;\n  decimals: number;\n  logoURI?: string;\n  price?: number;\n  change24h?: number;\n  volume24h?: number;\n  marketCap?: number;\n  verified?: boolean;\n}\n\n// Mock search results for demonstration\nconst MOCK_RESULTS: TokenResult[] = [\n  {\n    address: \"So11111111111111111111111111111111111111112\",\n    symbol: \"SOL\",\n    name: \"Wrapped SOL\",\n    decimals: 9,\n    price: 142.56,\n    change24h: 2.34,\n    volume24h: 45672891,\n    marketCap: 67890123456,\n    verified: true\n  },\n  {\n    address: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n    symbol: \"USDC\",\n    name: \"USD Coin\",\n    decimals: 6,\n    price: 1.0,\n    change24h: 0.01,\n    volume24h: 123456789,\n    marketCap: 34567890123,\n    verified: true\n  },\n  {\n    address: \"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\",\n    symbol: \"RAY\",\n    name: \"Raydium\",\n    decimals: 6,\n    price: 2.45,\n    change24h: -1.23,\n    volume24h: 8765432,\n    marketCap: 456789012,\n    verified: true\n  }\n];\n\ninterface TokenCardProps {\n  token: TokenResult;\n  onTrade: (token: TokenResult) => void;\n}\n\nfunction TokenCard({ token, onTrade }: TokenCardProps) {\n  const [copied, setCopied] = useState(false);\n\n  const copyAddress = async () => {\n    try {\n      await navigator.clipboard.writeText(token.address);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error('Failed to copy: ', err);\n    }\n  };\n\n  const formatNumber = (num: number) => {\n    if (num >= 1e9) return `$${(num / 1e9).toFixed(2)}B`;\n    if (num >= 1e6) return `$${(num / 1e6).toFixed(2)}M`;\n    if (num >= 1e3) return `$${(num / 1e3).toFixed(2)}K`;\n    return `$${num.toFixed(2)}`;\n  };\n\n  const openJupiter = () => {\n    const jupiterUrl = `https://jup.ag/swap/SOL-${token.address}`;\n    window.open(jupiterUrl, '_blank', 'noopener,noreferrer');\n  };\n\n  return (\n    <Card className=\"p-6 hover:shadow-lg transition-shadow\">\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-12 h-12 bg-gradient-to-br from-primary/20 to-primary/40 rounded-full flex items-center justify-center\">\n            <span className=\"text-primary font-bold text-lg\">\n              {token.symbol?.charAt(0) || '?'}\n            </span>\n          </div>\n          <div>\n            <div className=\"flex items-center space-x-2\">\n              <h3 className=\"font-semibold text-lg\" data-testid={`token-symbol-${token.symbol}`}>\n                {token.symbol}\n              </h3>\n              {token.verified && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  <CheckCircle className=\"w-3 h-3 mr-1\" />\n                  Verified\n                </Badge>\n              )}\n            </div>\n            <p className=\"text-sm text-muted-foreground\" data-testid={`token-name-${token.symbol}`}>\n              {token.name}\n            </p>\n          </div>\n        </div>\n        \n        {token.change24h !== undefined && (\n          <div className={`flex items-center space-x-1 ${\n            token.change24h >= 0 ? 'text-green-600' : 'text-red-600'\n          }`}>\n            {token.change24h >= 0 ? (\n              <TrendingUp className=\"w-4 h-4\" />\n            ) : (\n              <TrendingDown className=\"w-4 h-4\" />\n            )}\n            <span className=\"font-medium\">\n              {token.change24h > 0 ? '+' : ''}{token.change24h.toFixed(2)}%\n            </span>\n          </div>\n        )}\n      </div>\n\n      <div className=\"space-y-3 mb-4\">\n        {token.price !== undefined && (\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Price</p>\n            <p className=\"text-xl font-bold\" data-testid={`token-price-${token.symbol}`}>\n              {formatNumber(token.price)}\n            </p>\n          </div>\n        )}\n\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          {token.volume24h !== undefined && (\n            <div>\n              <p className=\"text-muted-foreground\">24h Volume</p>\n              <p className=\"font-medium\">{formatNumber(token.volume24h)}</p>\n            </div>\n          )}\n          {token.marketCap !== undefined && (\n            <div>\n              <p className=\"text-muted-foreground\">Market Cap</p>\n              <p className=\"font-medium\">{formatNumber(token.marketCap)}</p>\n            </div>\n          )}\n        </div>\n\n        <div>\n          <p className=\"text-sm text-muted-foreground mb-1\">Contract Address</p>\n          <div className=\"flex items-center space-x-2\">\n            <code className=\"flex-1 text-xs bg-muted px-2 py-1 rounded font-mono\">\n              {`${token.address.slice(0, 8)}...${token.address.slice(-8)}`}\n            </code>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={copyAddress}\n              data-testid={`button-copy-${token.symbol}`}\n            >\n              {copied ? (\n                <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              ) : (\n                <Copy className=\"w-4 h-4\" />\n              )}\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex space-x-2\">\n        <Button\n          variant=\"outline\"\n          className=\"flex-1\"\n          onClick={openJupiter}\n          data-testid={`button-jupiter-${token.symbol}`}\n        >\n          <ExternalLink className=\"w-4 h-4 mr-2\" />\n          Trade on Jupiter\n        </Button>\n        <Button\n          className=\"flex-1\"\n          onClick={() => onTrade(token)}\n          data-testid={`button-trade-${token.symbol}`}\n        >\n          Quick Trade\n        </Button>\n      </div>\n    </Card>\n  );\n}\n\nexport default function ShitcoinsPage() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState<TokenResult[]>([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchError, setSearchError] = useState('');\n\n  const handleSearch = async () => {\n    if (!searchQuery.trim()) return;\n\n    setIsSearching(true);\n    setSearchError('');\n    \n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // For demo purposes, filter mock results or show all if searching for common terms\n      if (searchQuery.toLowerCase().includes('sol') || \n          searchQuery.toLowerCase().includes('usdc') || \n          searchQuery.toLowerCase().includes('ray') ||\n          searchQuery.length > 30) { // Assume it's a contract address\n        setSearchResults(MOCK_RESULTS);\n      } else {\n        setSearchResults([]);\n        setSearchError('No tokens found for this search. Try a different contract address or token symbol.');\n      }\n    } catch (error) {\n      setSearchError('Failed to search tokens. Please try again.');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  const handleTrade = (token: TokenResult) => {\n    // This would integrate with the trading panel\n    console.log('Trading token:', token);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <div className=\"flex min-h-screen\">\n        {/* Desktop Sidebar */}\n        <div className=\"hidden lg:block\">\n          <Sidebar />\n        </div>\n\n        {/* Mobile Sidebar */}\n        <Sidebar\n          isMobile\n          isOpen={isMobileMenuOpen}\n          onClose={() => setIsMobileMenuOpen(false)}\n        />\n\n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col min-h-screen\">\n          {/* Mobile Header */}\n          <MobileHeader\n            isMobileMenuOpen={isMobileMenuOpen}\n            setIsMobileMenuOpen={setIsMobileMenuOpen}\n          />\n\n          {/* Market Ticker */}\n          <MarketTicker />\n\n          {/* Page Header */}\n          <div className=\"p-6 border-b border-border\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-primary/20 to-primary/40 rounded-lg flex items-center justify-center\">\n                <Search className=\"w-5 h-5 text-primary\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold\">Shitcoins</h1>\n                <p className=\"text-muted-foreground\">\n                  Search and trade any Solana token via Jupiter\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Search Section */}\n          <div className=\"p-6 border-b border-border\">\n            <Card className=\"p-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"search\">Search Token</Label>\n                  <div className=\"flex space-x-3 mt-1\">\n                    <Input\n                      id=\"search\"\n                      type=\"text\"\n                      placeholder=\"Enter contract address, symbol, or name...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      onKeyPress={handleKeyPress}\n                      className=\"flex-1\"\n                      data-testid=\"input-search\"\n                    />\n                    <Button\n                      onClick={handleSearch}\n                      disabled={isSearching || !searchQuery.trim()}\n                      data-testid=\"button-search\"\n                    >\n                      {isSearching ? (\n                        <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                      ) : (\n                        <Search className=\"w-4 h-4\" />\n                      )}\n                      {isSearching ? 'Searching...' : 'Search'}\n                    </Button>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-2\">\n                    Search by contract address for best results. Example: So11111111111111111111111111111111111111112\n                  </p>\n                </div>\n\n                {searchError && (\n                  <div className=\"flex items-center space-x-2 text-destructive\">\n                    <AlertTriangle className=\"w-4 h-4\" />\n                    <span className=\"text-sm\">{searchError}</span>\n                  </div>\n                )}\n              </div>\n            </Card>\n          </div>\n\n          {/* Search Results */}\n          <div className=\"flex-1 p-6\">\n            {searchResults.length > 0 ? (\n              <div className=\"space-y-4\">\n                <h2 className=\"text-xl font-semibold\">\n                  Search Results ({searchResults.length})\n                </h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n                  {searchResults.map((token) => (\n                    <TokenCard\n                      key={token.address}\n                      token={token}\n                      onTrade={handleTrade}\n                    />\n                  ))}\n                </div>\n              </div>\n            ) : !isSearching && !searchError && (\n              <div className=\"text-center py-12\">\n                <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Search className=\"w-8 h-8 text-muted-foreground\" />\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">Find Any Solana Token</h3>\n                <p className=\"text-muted-foreground max-w-md mx-auto\">\n                  Search for any token on Solana by contract address, symbol, or name. \n                  Connect directly to Jupiter for seamless trading.\n                </p>\n              </div>\n            )}\n          </div>\n\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12545},"client/src/pages/wallets.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Sidebar } from \"@/components/exchange/sidebar\";\nimport { MobileHeader } from \"@/components/exchange/mobile-header\";\nimport { MarketTicker } from \"@/components/exchange/market-ticker\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Wallet, Plus, Send, Download, Eye, EyeOff } from \"lucide-react\";\n\n// Mock wallet data\nconst WALLETS = [\n  {\n    id: 'btc-wallet',\n    name: 'Bitcoin Wallet',\n    symbol: 'BTC',\n    icon: '₿',\n    balance: 0.0234567,\n    balanceZAR: 28125.45,\n    address: '1A2B3C4D5E6F7G8H9I0J1K2L3M4N5O6P7Q8R9S',\n    color: 'bg-orange-500',\n    textColor: 'text-orange-600'\n  },\n  {\n    id: 'eth-wallet',\n    name: 'Ethereum Wallet',\n    symbol: 'ETH',\n    icon: 'Ξ',\n    balance: 1.247891,\n    balanceZAR: 80423.12,\n    address: '0x1234567890abcdef1234567890abcdef12345678',\n    color: 'bg-blue-500',\n    textColor: 'text-blue-600'\n  },\n  {\n    id: 'usdt-wallet',\n    name: 'Tether Wallet',\n    symbol: 'USDT',\n    icon: '₮',\n    balance: 2500.00,\n    balanceZAR: 46250.00,\n    address: '0xabcdef1234567890abcdef1234567890abcdef12',\n    color: 'bg-green-500',\n    textColor: 'text-green-600'\n  },\n  {\n    id: 'zar-wallet',\n    name: 'ZAR Wallet',\n    symbol: 'ZAR',\n    icon: 'R',\n    balance: 15420.75,\n    balanceZAR: 15420.75,\n    address: 'ZAR-WALLET-001',\n    color: 'bg-purple-500',\n    textColor: 'text-purple-600'\n  },\n  {\n    id: 'usd-wallet',\n    name: 'USD Wallet',\n    symbol: 'USD',\n    icon: '$',\n    balance: 850.00,\n    balanceZAR: 15725.00,\n    address: 'USD-WALLET-001',\n    color: 'bg-green-600',\n    textColor: 'text-green-700'\n  }\n];\n\ninterface WalletCardProps {\n  wallet: typeof WALLETS[0];\n  isBalanceVisible: boolean;\n}\n\nfunction WalletCard({ wallet, isBalanceVisible }: WalletCardProps) {\n  const formatBalance = (amount: number, symbol: string) => {\n    if (!isBalanceVisible) return '••••••';\n    \n    if (symbol === 'BTC') return amount.toFixed(7);\n    if (symbol === 'ETH') return amount.toFixed(6);\n    if (['ZAR', 'USD'].includes(symbol)) return amount.toFixed(2);\n    return amount.toFixed(4);\n  };\n\n  const formatAddress = (address: string) => {\n    if (!isBalanceVisible) return '••••••••••••••••••••';\n    return `${address.slice(0, 8)}...${address.slice(-8)}`;\n  };\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className={`w-12 h-12 rounded-full ${wallet.color} flex items-center justify-center`}>\n            <span className=\"text-white text-lg font-bold\">{wallet.icon}</span>\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-lg\" data-testid={`wallet-name-${wallet.id}`}>\n              {wallet.name}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\" data-testid={`wallet-symbol-${wallet.id}`}>\n              {wallet.symbol}\n            </p>\n          </div>\n        </div>\n        <Badge variant=\"secondary\" className={wallet.textColor}>\n          Active\n        </Badge>\n      </div>\n\n      <div className=\"space-y-3 mb-6\">\n        <div>\n          <p className=\"text-sm text-muted-foreground\">Balance</p>\n          <p className=\"text-2xl font-bold font-mono\" data-testid={`wallet-balance-${wallet.id}`}>\n            {formatBalance(wallet.balance, wallet.symbol)} {wallet.symbol}\n          </p>\n        </div>\n        \n        <div>\n          <p className=\"text-sm text-muted-foreground\">Value (ZAR)</p>\n          <p className=\"text-lg font-semibold\" data-testid={`wallet-value-${wallet.id}`}>\n            {isBalanceVisible ? `R${wallet.balanceZAR.toLocaleString()}` : '••••••'}\n          </p>\n        </div>\n\n        <div>\n          <p className=\"text-sm text-muted-foreground\">Address</p>\n          <p className=\"text-xs font-mono text-muted-foreground\" data-testid={`wallet-address-${wallet.id}`}>\n            {formatAddress(wallet.address)}\n          </p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-3\">\n        <Link href=\"/send\">\n          <Button variant=\"outline\" size=\"sm\" className=\"w-full\" data-testid={`button-send-${wallet.id}`}>\n            <Send className=\"w-4 h-4 mr-2\" />\n            Send\n          </Button>\n        </Link>\n        <Link href=\"/receive\">\n          <Button variant=\"outline\" size=\"sm\" className=\"w-full\" data-testid={`button-receive-${wallet.id}`}>\n            <Download className=\"w-4 h-4 mr-2\" />\n            Receive\n          </Button>\n        </Link>\n      </div>\n    </Card>\n  );\n}\n\nexport default function WalletsPage() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [isBalanceVisible, setIsBalanceVisible] = useState(true);\n\n  const totalBalanceZAR = WALLETS.reduce((sum, wallet) => sum + wallet.balanceZAR, 0);\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <div className=\"flex min-h-screen\">\n        {/* Desktop Sidebar */}\n        <div className=\"hidden lg:block\">\n          <Sidebar />\n        </div>\n\n        {/* Mobile Sidebar */}\n        <Sidebar\n          isMobile\n          isOpen={isMobileMenuOpen}\n          onClose={() => setIsMobileMenuOpen(false)}\n        />\n\n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col min-h-screen\">\n          {/* Mobile Header */}\n          <MobileHeader\n            isMobileMenuOpen={isMobileMenuOpen}\n            setIsMobileMenuOpen={setIsMobileMenuOpen}\n          />\n\n          {/* Market Ticker */}\n          <MarketTicker />\n\n          {/* Page Header */}\n          <div className=\"p-6 border-b border-border\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <Wallet className=\"w-5 h-5 text-primary\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-bold\">My Wallets</h1>\n                  <p className=\"text-muted-foreground\">\n                    Manage your cryptocurrency and fiat wallets\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center space-x-3\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setIsBalanceVisible(!isBalanceVisible)}\n                  data-testid=\"button-toggle-balance\"\n                >\n                  {isBalanceVisible ? (\n                    <>\n                      <EyeOff className=\"w-4 h-4 mr-2\" />\n                      Hide\n                    </>\n                  ) : (\n                    <>\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      Show\n                    </>\n                  )}\n                </Button>\n                <Button data-testid=\"button-add-wallet\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Wallet\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Portfolio Summary */}\n          <div className=\"p-6 border-b border-border\">\n            <Card className=\"p-6\">\n              <div className=\"text-center\">\n                <p className=\"text-sm text-muted-foreground mb-2\">Total Portfolio Value</p>\n                <p className=\"text-4xl font-bold mb-4\" data-testid=\"total-portfolio-value\">\n                  {isBalanceVisible ? `R${totalBalanceZAR.toLocaleString()}` : '••••••••'}\n                </p>\n                <div className=\"flex justify-center space-x-6 text-sm\">\n                  <div className=\"text-center\">\n                    <p className=\"text-muted-foreground\">Wallets</p>\n                    <p className=\"font-semibold\">{WALLETS.length}</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-muted-foreground\">Assets</p>\n                    <p className=\"font-semibold\">{WALLETS.length}</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-muted-foreground\">24h Change</p>\n                    <p className=\"font-semibold text-green-600\">+2.34%</p>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          </div>\n\n          {/* Wallets Grid */}\n          <div className=\"flex-1 p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n              {WALLETS.map((wallet) => (\n                <WalletCard\n                  key={wallet.id}\n                  wallet={wallet}\n                  isBalanceVisible={isBalanceVisible}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9027},"client/src/components/exchange/chart-panel.tsx":{"content":"import { useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport {\n  ResponsiveContainer,\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from \"recharts\";\nimport type { MarketData } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Expand } from \"lucide-react\";\n\ninterface ChartPanelProps {\n  currentPair: string;\n}\n\nconst timeframes = [\n  { label: \"1H\", value: \"1h\", active: true },\n  { label: \"1D\", value: \"1d\" },\n  { label: \"1W\", value: \"1w\" },\n  { label: \"1M\", value: \"1m\" },\n  { label: \"1Y\", value: \"1y\" },\n];\n\nexport function ChartPanel({ currentPair }: ChartPanelProps) {\n  const { data: marketData = [], isLoading } = useQuery<MarketData[]>({\n    queryKey: [\"/api/market\", currentPair],\n    refetchInterval: 5000,\n  });\n\n  const chartData = useMemo(() => {\n    return marketData.map((data, index) => ({\n      time: new Date(data.timestamp).toLocaleTimeString([], {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      }),\n      price: parseFloat(data.price),\n      index,\n    }));\n  }, [marketData]);\n\n  const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : 0;\n  const firstPrice = chartData.length > 0 ? chartData[0].price : 0;\n  const priceChange = currentPrice - firstPrice;\n  const percentChange = firstPrice > 0 ? (priceChange / firstPrice) * 100 : 0;\n\n  const formatPrice = (price: number) => {\n    if (currentPair.includes(\"ZAR\")) {\n      return `R${price.toLocaleString()}`;\n    }\n    return price.toLocaleString();\n  };\n\n  if (isLoading) {\n    return (\n      <section className=\"flex-1 p-6\">\n        <div className=\"h-full flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\" />\n            <p className=\"text-muted-foreground\">Loading chart data...</p>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"flex-1 p-6\">\n      <div className=\"h-full flex flex-col space-y-6\">\n        {/* Price Header */}\n        <div className=\"flex flex-col sm:flex-row sm:items-end sm:justify-between space-y-4 sm:space-y-0\">\n          <div>\n            <div className=\"text-sm text-muted-foreground mb-1\">Trading Pair</div>\n            <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-current-pair\">\n              {currentPair}\n            </h1>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-4xl font-bold font-mono\" data-testid=\"text-current-price\">\n              {formatPrice(currentPrice)}\n            </div>\n            <div \n              className={`text-lg ${percentChange >= 0 ? \"price-up\" : \"price-down\"}`}\n              data-testid=\"text-price-change\"\n            >\n              {percentChange >= 0 ? \"+\" : \"\"}{formatPrice(priceChange)} ({percentChange.toFixed(2)}%) today\n            </div>\n          </div>\n        </div>\n\n        {/* Chart Container */}\n        <div className=\"flex-1 min-h-[400px] bg-card rounded-xl border border-border p-4 chart-container\">\n          {chartData.length > 0 ? (\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <AreaChart data={chartData} margin={{ left: 12, right: 12, top: 10, bottom: 0 }}>\n                <defs>\n                  <linearGradient id=\"priceGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"0%\" stopColor=\"hsl(204, 76%, 49%)\" stopOpacity={0.4} />\n                    <stop offset=\"100%\" stopColor=\"hsl(204, 76%, 49%)\" stopOpacity={0} />\n                  </linearGradient>\n                </defs>\n                <CartesianGrid strokeOpacity={0.08} vertical={false} />\n                <XAxis \n                  dataKey=\"time\" \n                  tick={{ fill: \"hsl(215, 20%, 65%)\", fontSize: 12 }} \n                  tickLine={false} \n                  axisLine={false} \n                  minTickGap={32} \n                />\n                <YAxis \n                  tick={{ fill: \"hsl(215, 20%, 65%)\", fontSize: 12 }} \n                  tickLine={false} \n                  axisLine={false} \n                  width={70} \n                  domain={[\"dataMin\", \"dataMax\"]}\n                  tickFormatter={(value) => formatPrice(value)}\n                />\n                <Tooltip\n                  contentStyle={{ \n                    background: \"hsl(222, 84%, 5%)\", \n                    border: \"1px solid hsl(217, 32%, 17%)\", \n                    borderRadius: 12, \n                    color: \"hsl(210, 40%, 98%)\" \n                  }}\n                  labelStyle={{ color: \"hsl(215, 20%, 65%)\" }}\n                  formatter={(value: number) => [formatPrice(value), \"Price\"]}\n                />\n                <Area \n                  type=\"monotone\" \n                  dataKey=\"price\" \n                  stroke=\"hsl(204, 76%, 49%)\" \n                  fill=\"url(#priceGradient)\" \n                  strokeWidth={2} \n                />\n              </AreaChart>\n            </ResponsiveContainer>\n          ) : (\n            <div className=\"w-full h-full flex items-center justify-center\">\n              <div className=\"text-center\">\n                <svg className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M2 10a8 8 0 018-8v8h8a8 8 0 11-16 0z\" />\n                </svg>\n                <p className=\"text-muted-foreground\">No chart data available</p>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Chart Controls */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            {timeframes.map((timeframe) => (\n              <Button\n                key={timeframe.value}\n                variant={timeframe.active ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                className=\"px-3 py-1.5 text-sm\"\n                data-testid={`button-timeframe-${timeframe.value}`}\n              >\n                {timeframe.label}\n              </Button>\n            ))}\n          </div>\n          <Button variant=\"outline\" size=\"sm\" data-testid=\"button-fullscreen\">\n            <Expand className=\"w-4 h-4 mr-2\" />\n            Fullscreen\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6363},"client/src/components/exchange/market-ticker.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { MarketData } from \"@shared/schema\";\n\nexport function MarketTicker() {\n  const { data: marketData = [] } = useQuery<MarketData[]>({\n    queryKey: [\"/api/market\"],\n    refetchInterval: 5000,\n  });\n\n  const formatPrice = (price: string, pair: string) => {\n    const numPrice = parseFloat(price);\n    if (pair.includes(\"ZAR\")) {\n      return `R${numPrice.toLocaleString()}`;\n    }\n    return numPrice.toLocaleString();\n  };\n\n  const formatChange = (change: string | null) => {\n    if (!change) return \"0.00%\";\n    const numChange = parseFloat(change);\n    return `${numChange >= 0 ? \"+\" : \"\"}${numChange.toFixed(2)}%`;\n  };\n\n  return (\n    <div className=\"bg-muted border-b border-border overflow-hidden\">\n      <div className=\"ticker-scroll flex space-x-8 py-2 px-4 whitespace-nowrap\">\n        {marketData.map((data) => (\n          <div key={data.pair} className=\"flex items-center space-x-2\" data-testid={`ticker-${data.pair}`}>\n            <span className=\"text-sm font-medium\" data-testid={`text-pair-${data.pair}`}>\n              {data.pair}\n            </span>\n            <span className=\"text-sm font-mono\" data-testid={`text-price-${data.pair}`}>\n              {formatPrice(data.price, data.pair)}\n            </span>\n            <span \n              className={`text-xs ${\n                parseFloat(data.change24h || \"0\") >= 0 ? \"price-up\" : \"price-down\"\n              }`}\n              data-testid={`text-change-${data.pair}`}\n            >\n              {formatChange(data.change24h)}\n            </span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1638},"client/src/components/exchange/mobile-header.tsx":{"content":"import { Menu, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface MobileHeaderProps {\n  isMobileMenuOpen: boolean;\n  setIsMobileMenuOpen: (open: boolean) => void;\n}\n\nexport function MobileHeader({ isMobileMenuOpen, setIsMobileMenuOpen }: MobileHeaderProps) {\n  return (\n    <header className=\"lg:hidden flex items-center justify-between p-4 border-b border-border bg-card\">\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n        data-testid=\"button-mobile-menu\"\n      >\n        {isMobileMenuOpen ? (\n          <X className=\"h-5 w-5\" />\n        ) : (\n          <Menu className=\"h-5 w-5\" />\n        )}\n      </Button>\n      \n      <div className=\"flex items-center space-x-2\">\n        <div className=\"w-6 h-6 bg-primary rounded flex items-center justify-center\">\n          <svg className=\"w-3 h-3 text-primary-foreground\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path d=\"M2 10a8 8 0 018-8v8h8a8 8 0 11-16 0z\" />\n          </svg>\n        </div>\n        <span className=\"font-semibold\" data-testid=\"text-brand\">Exchange</span>\n      </div>\n      \n      <div className=\"w-6\" />\n    </header>\n  );\n}\n","size_bytes":1215},"client/src/components/exchange/sidebar.tsx":{"content":"import { Home, Compass, Search, BarChart3, Wallet, Zap, Users, HelpCircle, User } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SidebarProps {\n  className?: string;\n  isMobile?: boolean;\n  isOpen?: boolean;\n  onClose?: () => void;\n}\n\nconst navigationItems = [\n  { icon: Home, label: \"Home\", href: \"/\" },\n  { icon: Compass, label: \"Explore\", href: \"/explore\" },\n  { icon: Wallet, label: \"Wallets\", href: \"/wallets\" },\n  { icon: Zap, label: \"Shitcoins\", href: \"/shitcoins\" },\n  { icon: BarChart3, label: \"Activity\", href: \"/activity\" },\n];\n\nconst portfolioItems = [\n  { icon: \"₿\", label: \"Bitcoin\", amount: \"0.0234\", color: \"text-orange-500\" },\n  { icon: \"Ξ\", label: \"Ethereum\", amount: \"1.247\", color: \"text-blue-400\" },\n];\n\nconst bottomItems = [\n  { icon: Users, label: \"Referrals\" },\n  { icon: HelpCircle, label: \"Help\" },\n  { icon: User, label: \"Profile\" },\n];\n\nexport function Sidebar({ className, isMobile, isOpen, onClose }: SidebarProps) {\n  const NavItem = ({ \n    icon: Icon, \n    label, \n    href,\n    amount, \n    color \n  }: { \n    icon: any; \n    label: string; \n    href?: string;\n    amount?: string; \n    color?: string; \n  }) => {\n    const [location] = useLocation();\n    const active = href && location === href;\n    \n    const content = (\n      <>\n        {typeof Icon === \"string\" ? (\n          <span className={cn(\"w-5 text-center font-mono\", color)}>{Icon}</span>\n        ) : (\n          <Icon className=\"w-5 h-5\" />\n        )}\n        <span>{label}</span>\n        {amount && (\n          <span className=\"ml-auto text-xs font-mono\" data-testid={`amount-${label.toLowerCase()}`}>\n            {amount}\n          </span>\n        )}\n      </>\n    );\n\n    if (href) {\n      return (\n        <Link href={href}>\n          <div\n            className={cn(\n              \"flex items-center space-x-3 px-3 py-2.5 rounded-lg text-left w-full transition-colors cursor-pointer\",\n              active\n                ? \"bg-secondary text-secondary-foreground\"\n                : \"text-muted-foreground hover:bg-secondary hover:text-secondary-foreground\"\n            )}\n            onClick={isMobile ? onClose : undefined}\n            data-testid={`nav-${label.toLowerCase()}`}\n          >\n            {content}\n          </div>\n        </Link>\n      );\n    }\n\n    return (\n      <button\n        className={cn(\n          \"flex items-center space-x-3 px-3 py-2.5 rounded-lg text-left w-full transition-colors\",\n          \"text-muted-foreground hover:bg-secondary hover:text-secondary-foreground\"\n        )}\n        onClick={isMobile ? onClose : undefined}\n        data-testid={`nav-${label.toLowerCase()}`}\n      >\n        {content}\n      </button>\n    );\n  };\n\n  const content = (\n    <div className=\"flex h-full flex-col\">\n      <div className=\"flex items-center space-x-2 p-6 border-b border-border\">\n        <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n          <svg className=\"w-4 h-4 text-primary-foreground\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path d=\"M2 10a8 8 0 018-8v8h8a8 8 0 11-16 0z\" />\n          </svg>\n        </div>\n        <span className=\"text-lg font-semibold\" data-testid=\"text-brand\">Exchange</span>\n      </div>\n      \n      <nav className=\"flex-1 p-4 space-y-1\">\n        {navigationItems.map((item) => (\n          <NavItem key={item.label} {...item} />\n        ))}\n        \n        <div className=\"py-2\">\n          <div className=\"h-px bg-border\" />\n        </div>\n        \n        <div className=\"px-3 py-2 text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n          Your Portfolio\n        </div>\n        \n        {portfolioItems.map((item) => (\n          <NavItem key={item.label} {...item} />\n        ))}\n      </nav>\n      \n      <div className=\"border-t border-border p-4 space-y-1\">\n        {bottomItems.map((item) => (\n          <NavItem key={item.label} {...item} />\n        ))}\n      </div>\n    </div>\n  );\n\n  if (isMobile) {\n    return (\n      <>\n        {/* Overlay */}\n        {isOpen && (\n          <div \n            className=\"fixed inset-0 bg-black/50 z-40 lg:hidden\"\n            onClick={onClose}\n            data-testid=\"mobile-overlay\"\n          />\n        )}\n        \n        {/* Mobile Sidebar */}\n        <aside\n          className={cn(\n            \"fixed inset-y-0 left-0 z-50 w-64 bg-card border-r border-border lg:hidden transition-transform duration-300 ease-in-out\",\n            isOpen ? \"translate-x-0\" : \"-translate-x-full\",\n            className\n          )}\n          data-testid=\"mobile-sidebar\"\n        >\n          {content}\n        </aside>\n      </>\n    );\n  }\n\n  return (\n    <aside className={cn(\"w-64 bg-card border-r border-border\", className)} data-testid=\"desktop-sidebar\">\n      {content}\n    </aside>\n  );\n}\n","size_bytes":4818},"client/src/components/exchange/trading-panel.tsx":{"content":"import { useState, useMemo, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface TradingPanelProps {\n  onPairChange: (from: string, to: string, action: \"buy\" | \"sell\" | \"convert\") => void;\n}\n\nconst FIAT = [\"ZAR\", \"USD\", \"EUR\", \"GBP\"] as const;\nconst CRYPTO = [\"BTC\", \"ETH\", \"USDT\"] as const;\nconst ALL_ASSETS = [...FIAT, ...CRYPTO] as const;\n\nconst FX_ZAR_PER = {\n  USD: 18.5,\n  EUR: 20.0,\n  GBP: 23.0,\n};\n\nconst USD_PRICES = {\n  BTC: 65000,\n  ETH: 3500,\n  USDT: 1,\n};\n\nconst FEE_RATE = 0.001; // 0.10%\n\ntype ActionTab = \"buy\" | \"sell\" | \"convert\";\n\nfunction isFiat(asset: string): boolean {\n  return FIAT.includes(asset as any);\n}\n\nfunction isCrypto(asset: string): boolean {\n  return CRYPTO.includes(asset as any);\n}\n\nfunction priceInZAR(asset: string): number {\n  if (asset === \"ZAR\") return 1;\n  if (isFiat(asset)) return FX_ZAR_PER[asset as keyof typeof FX_ZAR_PER] ?? 1;\n  const usd = USD_PRICES[asset as keyof typeof USD_PRICES] ?? 0;\n  return usd * FX_ZAR_PER.USD;\n}\n\nfunction formatAmount(asset: string, amount: number): string {\n  if (!Number.isFinite(amount)) return \"–\";\n  if (isFiat(asset)) return amount.toLocaleString(undefined, { maximumFractionDigits: 2 });\n  if (asset === \"BTC\") return amount.toLocaleString(undefined, { maximumFractionDigits: 6 });\n  if (asset === \"ETH\") return amount.toLocaleString(undefined, { maximumFractionDigits: 5 });\n  return amount.toLocaleString(undefined, { maximumFractionDigits: 4 });\n}\n\nfunction calculateQuote(from: string, to: string, fromAmount: number) {\n  const fromPrice = priceInZAR(from);\n  const toPrice = priceInZAR(to);\n  \n  if (!fromPrice || !toPrice || !Number.isFinite(fromAmount) || fromAmount <= 0) {\n    return { toAmount: 0, rate: 0, fee: 0 };\n  }\n  \n  const grossTo = (fromAmount * fromPrice) / toPrice;\n  const fee = grossTo * FEE_RATE;\n  const netTo = Math.max(grossTo - fee, 0);\n  const rate = fromPrice / toPrice;\n  \n  return { toAmount: netTo, rate, fee };\n}\n\nexport function TradingPanel({ onPairChange }: TradingPanelProps) {\n  const [activeTab, setActiveTab] = useState<ActionTab>(\"buy\");\n  \n  // Buy state\n  const [fromBuy, setFromBuy] = useState(\"ZAR\");\n  const [toBuy, setToBuy] = useState(\"BTC\");\n  const [amountBuy, setAmountBuy] = useState(\"\");\n  \n  // Sell state\n  const [fromSell, setFromSell] = useState(\"BTC\");\n  const [toSell, setToSell] = useState(\"ZAR\");\n  const [amountSell, setAmountSell] = useState(\"\");\n  \n  // Convert state\n  const [fromConvert, setFromConvert] = useState(\"BTC\");\n  const [toConvert, setToConvert] = useState(\"ETH\");\n  const [amountConvert, setAmountConvert] = useState(\"\");\n\n  // Calculate quotes\n  const buyQuote = useMemo(() => \n    calculateQuote(fromBuy, toBuy, parseFloat(amountBuy) || 0), \n    [fromBuy, toBuy, amountBuy]\n  );\n  \n  const sellQuote = useMemo(() => \n    calculateQuote(fromSell, toSell, parseFloat(amountSell) || 0), \n    [fromSell, toSell, amountSell]\n  );\n  \n  const convertQuote = useMemo(() => \n    calculateQuote(fromConvert, toConvert, parseFloat(amountConvert) || 0), \n    [fromConvert, toConvert, amountConvert]\n  );\n\n  // Update parent component when pairs change\n  useEffect(() => {\n    if (activeTab === \"buy\") {\n      onPairChange(fromBuy, toBuy, \"buy\");\n    } else if (activeTab === \"sell\") {\n      onPairChange(fromSell, toSell, \"sell\");\n    } else {\n      onPairChange(fromConvert, toConvert, \"convert\");\n    }\n  }, [activeTab, fromBuy, toBuy, fromSell, toSell, fromConvert, toConvert, onPairChange]);\n\n  const handleTabChange = (tab: ActionTab) => {\n    setActiveTab(tab);\n  };\n\n  const handleQuickAmount = (amount: string) => {\n    if (activeTab === \"buy\") {\n      setAmountBuy(amount);\n    } else if (activeTab === \"sell\") {\n      setAmountSell(amount);\n    } else {\n      setAmountConvert(amount);\n    }\n  };\n\n  const TabButton = ({ tab, label }: { tab: ActionTab; label: string }) => (\n    <Button\n      variant={activeTab === tab ? \"default\" : \"ghost\"}\n      size=\"sm\"\n      className=\"flex-1\"\n      onClick={() => handleTabChange(tab)}\n      data-testid={`tab-${tab}`}\n    >\n      {label}\n    </Button>\n  );\n\n  const QuickAmountButtons = () => (\n    <div className=\"grid grid-cols-4 gap-2\">\n      {[\"500\", \"1000\", \"5000\", \"Max\"].map((amount) => (\n        <Button\n          key={amount}\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"text-xs\"\n          onClick={() => handleQuickAmount(amount === \"Max\" ? \"10000\" : amount)}\n          data-testid={`button-quick-${amount.toLowerCase()}`}\n        >\n          {amount === \"Max\" ? \"Max\" : `R${amount}`}\n        </Button>\n      ))}\n    </div>\n  );\n\n  const OrderSummary = ({ quote, from, to }: { quote: any; from: string; to: string }) => (\n    <div className=\"bg-muted rounded-lg p-4 space-y-3\">\n      <div className=\"flex justify-between text-sm\">\n        <span className=\"text-muted-foreground\">Rate</span>\n        <span className=\"font-mono\" data-testid=\"text-exchange-rate\">\n          1 {from} = {formatAmount(to, quote.rate)} {to}\n        </span>\n      </div>\n      <div className=\"flex justify-between text-sm\">\n        <span className=\"text-muted-foreground\">Fee (0.10%)</span>\n        <span className=\"font-mono\" data-testid=\"text-trading-fee\">\n          {formatAmount(to, quote.fee)} {to}\n        </span>\n      </div>\n      <div className=\"h-px bg-border\" />\n      <div className=\"flex justify-between font-semibold\">\n        <span>You receive</span>\n        <span className=\"font-mono\" data-testid=\"text-receive-amount\">\n          {formatAmount(to, quote.toAmount)} {to}\n        </span>\n      </div>\n    </div>\n  );\n\n  return (\n    <aside className=\"w-full lg:w-96 bg-card border-l border-border trading-panel\">\n      <div className=\"h-full flex flex-col\">\n        {/* Trading Tabs */}\n        <div className=\"p-4 border-b border-border\">\n          <div className=\"grid grid-cols-3 gap-1 p-1 bg-muted rounded-lg\">\n            <TabButton tab=\"buy\" label=\"Buy\" />\n            <TabButton tab=\"sell\" label=\"Sell\" />\n            <TabButton tab=\"convert\" label=\"Convert\" />\n          </div>\n        </div>\n\n        {/* Trading Forms */}\n        <div className=\"flex-1 p-4 space-y-4\">\n          {activeTab === \"buy\" && (\n            <div className=\"space-y-4\" data-testid=\"form-buy\">\n              <div>\n                <Label htmlFor=\"pay-with\">Pay with</Label>\n                <Select value={fromBuy} onValueChange={setFromBuy}>\n                  <SelectTrigger data-testid=\"select-pay-with\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {FIAT.map((currency) => (\n                      <SelectItem key={currency} value={currency}>\n                        {currency} - {currency === \"ZAR\" ? \"South African Rand\" : \n                                    currency === \"USD\" ? \"US Dollar\" :\n                                    currency === \"EUR\" ? \"Euro\" : \"British Pound\"}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"buy-asset\">Buy</Label>\n                <Select value={toBuy} onValueChange={setToBuy}>\n                  <SelectTrigger data-testid=\"select-buy-asset\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {CRYPTO.map((currency) => (\n                      <SelectItem key={currency} value={currency}>\n                        {currency} - {currency === \"BTC\" ? \"Bitcoin\" : \n                                      currency === \"ETH\" ? \"Ethereum\" : \"Tether\"}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"amount-buy\">Amount ({fromBuy})</Label>\n                <Input\n                  id=\"amount-buy\"\n                  type=\"text\"\n                  inputMode=\"decimal\"\n                  placeholder=\"0.00\"\n                  value={amountBuy}\n                  onChange={(e) => setAmountBuy(e.target.value.replace(/[^0-9.]/g, \"\"))}\n                  data-testid=\"input-amount-buy\"\n                />\n              </div>\n\n              <QuickAmountButtons />\n\n              <OrderSummary quote={buyQuote} from={fromBuy} to={toBuy} />\n\n              <Button \n                className=\"w-full\" \n                size=\"lg\"\n                disabled={!amountBuy || parseFloat(amountBuy) <= 0}\n                data-testid=\"button-preview-buy\"\n              >\n                Preview Buy Order\n              </Button>\n            </div>\n          )}\n\n          {activeTab === \"sell\" && (\n            <div className=\"space-y-4\" data-testid=\"form-sell\">\n              <div>\n                <Label htmlFor=\"sell-asset\">Sell</Label>\n                <Select value={fromSell} onValueChange={setFromSell}>\n                  <SelectTrigger data-testid=\"select-sell-asset\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {CRYPTO.map((currency) => (\n                      <SelectItem key={currency} value={currency}>\n                        {currency} - {currency === \"BTC\" ? \"Bitcoin\" : \n                                      currency === \"ETH\" ? \"Ethereum\" : \"Tether\"}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"receive-currency\">For</Label>\n                <Select value={toSell} onValueChange={setToSell}>\n                  <SelectTrigger data-testid=\"select-receive-currency\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {FIAT.map((currency) => (\n                      <SelectItem key={currency} value={currency}>\n                        {currency} - {currency === \"ZAR\" ? \"South African Rand\" : \n                                    currency === \"USD\" ? \"US Dollar\" :\n                                    currency === \"EUR\" ? \"Euro\" : \"British Pound\"}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"amount-sell\">Amount ({fromSell})</Label>\n                <Input\n                  id=\"amount-sell\"\n                  type=\"text\"\n                  inputMode=\"decimal\"\n                  placeholder=\"0.00000000\"\n                  value={amountSell}\n                  onChange={(e) => setAmountSell(e.target.value.replace(/[^0-9.]/g, \"\"))}\n                  data-testid=\"input-amount-sell\"\n                />\n              </div>\n\n              <OrderSummary quote={sellQuote} from={fromSell} to={toSell} />\n\n              <Button \n                variant=\"destructive\"\n                className=\"w-full\" \n                size=\"lg\"\n                disabled={!amountSell || parseFloat(amountSell) <= 0}\n                data-testid=\"button-preview-sell\"\n              >\n                Preview Sell Order\n              </Button>\n            </div>\n          )}\n\n          {activeTab === \"convert\" && (\n            <div className=\"space-y-4\" data-testid=\"form-convert\">\n              <div>\n                <Label htmlFor=\"convert-from\">From</Label>\n                <Select \n                  value={fromConvert} \n                  onValueChange={(value) => {\n                    setFromConvert(value);\n                    if (value === toConvert) {\n                      setToConvert(value === \"BTC\" ? \"ETH\" : \"BTC\");\n                    }\n                  }}\n                >\n                  <SelectTrigger data-testid=\"select-convert-from\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {ALL_ASSETS.map((currency) => (\n                      <SelectItem key={currency} value={currency}>\n                        {currency}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"convert-to\">To</Label>\n                <Select value={toConvert} onValueChange={setToConvert}>\n                  <SelectTrigger data-testid=\"select-convert-to\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {ALL_ASSETS.filter(a => a !== fromConvert).map((currency) => (\n                      <SelectItem key={currency} value={currency}>\n                        {currency}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"amount-convert\">Amount ({fromConvert})</Label>\n                <Input\n                  id=\"amount-convert\"\n                  type=\"text\"\n                  inputMode=\"decimal\"\n                  placeholder=\"0.00000000\"\n                  value={amountConvert}\n                  onChange={(e) => setAmountConvert(e.target.value.replace(/[^0-9.]/g, \"\"))}\n                  data-testid=\"input-amount-convert\"\n                />\n              </div>\n\n              <OrderSummary quote={convertQuote} from={fromConvert} to={toConvert} />\n\n              <Button \n                className=\"w-full\" \n                size=\"lg\"\n                disabled={!amountConvert || parseFloat(amountConvert) <= 0}\n                data-testid=\"button-preview-convert\"\n              >\n                Preview Convert\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Recent Activity */}\n        <div className=\"border-t border-border p-4\">\n          <h3 className=\"text-sm font-semibold mb-3\">Recent Activity</h3>\n          <div className=\"space-y-3 max-h-40 overflow-y-auto\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <div>\n                <div className=\"font-medium\">Bought BTC</div>\n                <div className=\"text-xs text-muted-foreground\">2 hours ago</div>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"font-mono\">0.00083 BTC</div>\n                <div className=\"text-xs text-muted-foreground\">R1,000</div>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between text-sm\">\n              <div>\n                <div className=\"font-medium\">Sold ETH</div>\n                <div className=\"text-xs text-muted-foreground\">1 day ago</div>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"font-mono\">0.5 ETH</div>\n                <div className=\"text-xs text-muted-foreground\">R32,375</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":15217},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}